상속을 언제 사용할까를 정리를 해보면 코드의 재사용이라는 부분에 있어서

객체지향방법에서는 크게 두가지 방법을 사용을 할수가 있어요 우리가 이거를 

IS A관계 HAS A관계라고도 애기를 하고 그다음에 상속 인헤리턴스 그다음에 

컴포지션이라고도 이야기를 합니다. 음 제가 처음에 상속을 드릴때부터 쭉 

했던 애기가 클래스간의 관계가 좀 더 일반적이고 구체적인 관계 기능이 

확장되는 관계 베이스클래스와 드라이브드 클래스의 용어가 이때는 참 잘

어울리죠  그래서 원래 있는 기존의 클래스가 있고 그거보다 좀더 확장되고

좀더 구체적인 클래스들을 만든다. 라고 하면 상속을 쓰면 좋다. 라고 이야기를 

할수가  있습니다. 그래서 뭐 상위클래스인 임플루이가 있고 임플루이에도 여러

타입이 있을수가 있죠 그랬을때 그분들에 대해서 정규직이있고 비정규직이  있을

수도 있고 그다음에 엔지니어 파트는 따로  그다음에 임직원은 또 다르잖아요 

임원이 있고 직원이 있고 그런관계 이런모습들 여러가지의 구체적인 상황에 따라서

구현내용이 달라질거에요 그랬을때 이제 좀더 폴리모피즘 다형성을 써서 좋게 구현할려면

상위클래스에서 좀더 일반적인 구현을 하고 하위클래스에 대해서 그거에 대해서 재정의를 해서

사용할수 있게끔 그리고 상위클래스에 구현되어 있는 코드는 그걸 재사용을 할수 있게끔 

그렇게 구현하면 좋을 거구요 말씀드렸듯이 상속은 클래스간의 결합도가 높아지는 그런 설계기 

때문에 복잡하게 하는 설계는 좋은 설계는 아닙니다. 그리고 하이락키 계층의 깊이가 너무 길면

좋지 않다. 라는거를 말씀을 드리구요 이에반해 HAS A 관계라고도 이야기를  하는데 이미 좋은 

클래스가 있어요 그 클래스를 재활용하고 싶다. 라고 해서 무조건 상속을 받는건 아니다.라는 겁니다.

어떤 학생이 수업을 들어요 수업을 듣는데 SUBJECT코드가 잘만들어져 있죠 과목에  대한거 스튜어던트가

서브젝트를 상속받지를 않는다는거죠 서브젝트가 잘만들어져 있는데 애를 어레이 리스트를 잘 만들고 싶어요

어레이리스트를 상속받지를 않습니다. 어떻게 하죠 그안에 포함을 하잖아요 그래서 이런관계를 HAS A 관계

컴포지션 관계라고 합니다. 가장 많이 사용하는 코드재사용의 방법이구요 우리가 이미 많이 사용하고 있었습니다.

해당 클래스를 선언하거나 내가 내클래스 내부에서 생성을 하고 그 클래스의 메서드와 여러 기능들을 내가 가져다

섰었죠 어레이 리스트도 많이 섰었고 상속을 하지 않습니다. 그래서 HAS A관계로 쓸수있는 경우가 훨씬 많아요 

상속보다 그런데 음 우리가 상속 나중에 인터페이스도 마찬가지지만 어떤 뼈대를 만들고 그거에 대한 다양한 

확장이 필요하다라고 하면 쓰지 말라는 이야기가 아닙니다. 쓰실때는 쓰셔야 돼요 쓰셔야 되는데 잘 설계를 

해서 쓰시는게 좋다. 라는거 말씀을 드리겠습니다. 어 상속을 언제 쓰냐라는걸 말씀을 드렸고 다음강의에서

우리가 원래 있던 클래스로 어떻게 다시  돌아가느냐 그거를 다운캐스팅이라고 했잖아요 다운캐스팅에 대해서 

말씀을 드리도록 하겠습니다. 