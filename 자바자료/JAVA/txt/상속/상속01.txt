자 오늘부터 이젠 3장을 공부해 보도록 하겠습니다.

오늘부터 배우는 내용이 굉장히 중요한 부분들이 많이 있거든요 음 우리가 지금까지 배웠던거는 객체지향프로그램을 

시작하는데 있어서 클래스가 무엇인지 클래스를 어떻게 구현하는지 위주로 클래스간의 관계 이런것들을 말씀을 

드렸다면요 이제 이번장부터 말씀을 드리는거는 객체지향으로 우리가 프로그램을 할때 이제 설계를 하게 돼요 

그러면 클래스간에 어떤 관계를 설계를 한다라든가 아니면 인터페이스같은 거를 설계를 하게 되는데 그것들을 

어떻게 활용하느냐 의미가 무엇이고 어떻게 활용할때 좋은지 아 이번장을 공부를 하시면 여러분이 객체지향

프로그램이 왜 많이 쓰이는지 그리고 우리가 처음에 그런 애기를 했잖아요 유지보수가 좋고 확장성이 좋고

코드의 수정이 용이하다 이런애기들을 했는데 그게 왜 좋은지를 이제 말씀을 드릴겁니다. 오늘은 첫번째로 

상속부터 보도록 하겠습니다. 아 우리가 상속이라는 단어는 일상속에서도 많이 쓰는 단어죠 그래서 상속을 

받으면 그게 다 내게 되는거죠 네 그래서 클레스간에도 상속을 하게 되는데 음 흔히들 잘못알게 되시는 부분이

상속을 하면 뭐클래스를 재사용한다. 라는의미로 알고 있는 경우가 있는데 상속에 본래 목적중에 하나가 

코드의 재사용은 맞습니다. 코드의 재사용은 맞는데 무조건 코드의 재사용하는 목적으로 상속을 쓰지는 

않습니다. 아마 제가 상속을  하면서 계속 반복적으로 이럴때 쓰는거다 이런경우에 쓰는거다 라고 말씀을 

드릴거에요 그래서 그걸 보시면 아시겠지만 음 일단 우리가 상속을 한다는 것은 기존에 어떤 클래스가 

있는데 그 클래스의 어떤 기능 그다음에 속성 이미구현되어 있는 부분이죠 그래서 그런부분을 다른클레스에서

어 받아다 쓰는 거죠 근데 받아 쓰는데 어떻게 생각을 하셔야 되냐면 확장한다라는 생각으로 사용하시면 됩니다.

그래서 상속을 할때 클래스간에 상속을 할때 우리가 자바에서 익스텐즈라는 키워드를 씁니다. 어 여기보시면 

A라는 클래스가 상위클래스가 되구요 B라는 클래스가 하위클래스가 되는데 여기 클래스다이어그램을 간단하게

그린건데 여기 삼각형이 요렇게 있죠 그래서 구멍뚤린 삼각형이 있구요 우리가 상속을 하면 내려줄것같죠 

그런데 클래스 다이어그램에서는 하위클래스가 상위클래스가 바라본다. 라는의미로 이해하시면 좋을것 

같습니다.화살표가 위쪽으로 되어있구요 용어를 정리를 해드리면 위에 있는 클래스를 상위클래스다 패어런트클래스다

베이스클래스다 슈퍼클래스다 베이스클래스라는 용어는 이제 자바보다는 C++에서 많이 쓰는 용어니다. 

상속받는 클래스는 하위클래스 차일드클래스 드라이브클래스 서브클래스 뒤에 두개도 C++에서 많이 쓰는 

용어거든요 저희는 상위클래스 패어런트클래스나 차일드클래스 하위클래스라는 요정도 용어를 많이 

쓸거같구요 A라는 클래스가 있는데 B가 익스텐즈라고 했죠 확장한다라는 의미로 쓴다 아 그럼 상속을 

언제쓰냐라는걸 자세하게  이야기를 안했는데 네 그거는 다음 강의에서 예제를 같이 보면서 말씀을 

드릴거고 지금은 계략적인 문법과 사용방법 이런것들을 말씀 드리도록 하겠습니다. 어 익스텐즈라는 

키워드뒤에 A라는 클래스를 확장한다는 의미데 이 키워드뒤에 올수있는 클래스의 숫자는 단 하나에요

이 여러개가 올수 없습니다. 음 나중에 우리가 인터페이스를 하면 인터페이스뒤에는 여러개가 올수

있어요 그때 쓰는 키워드는 익스텐즈가 아니라 다른키워드를 쓰긴하는데 이게 왜 하나밖에 못오냐 

라고하면 음 C++같은경우는 여러개가 올수 있어요 여러개가 올수 있는데 자바는 C++이후에 나오는거죠

그러면서 여러개가 오게 되면 모호성이 발생할수 있어요 지금은 그문제에 대해서는 말씀을 안드리겠습니다.

왜냐면 우리가 아직 오버라이딩이라든가 뭐 폴리모피즘이라든가 이런것들 형변환 이런것들을 말씀을 

안드렸기 때문에 지금 이해하기는 여러개가 왔을때 문제점을 이야기하는거는 큰의미는 없는것 같구요 

그래서 하나만온다 자바는 싱글 인헤리턴스다 싱글 인헤리턴스가 되면서 모호함이 없어졌죠 자바언어를 

보시면 최근자바언어가 기능에 점점 확장되고 있지만 자바는 초기부터 추구한게 뭐냐면 안정성 그다음에 

심플 지금은 많이 복잡해  지긴했죠 여러가지 기능들이 있는데 C++보다 기존에 있던 C나 C++보다 

안전한 언어를 만들자라는게 취지였고 이런경우에도 뒤에 상속받을수 있는 클래스가 많이 올수록 

더 많은 확장 기능의 확장을 할수있지만 그로인해 발생할수 있는 모든 애매모호성이나 문제점은 

애초에 없애버리자 그래서 자바는 싱글 인헤리턴스만 가능합니다. 아 이제 상속을 언제 구현하느냐를 

개략적으로 말씀을 드리면요 어 어떤 클래스가 있어요 그런데 그 클래스가 굉장히 인젠 일반적인 개념을 

가진 클래스라는 거죠 그런데 그거와 굉장히 유사한 클래스를 만들건데 그 원래에 있던 클래스보다는 

기능이 좀더 많아야 되고 좀더 구체적인 클래스고 좀더 스펙스피카다 이런경우에는 기존의 클래스를 

상속받는겁니다. 한마디로 애랑 애랑은 결이 같은거에요 같은 스타일의 클래스인데 원래있던 클래스보다는 

내가 만들 새로만들클래스가 좀더 기능이 많고 좀더 구체적이고 좀더 스펙스픽하다.라고 하면 어떻게 

하느냐 상속을 받으시는거에요 이거를 기존에 제가 나중에 몇가지 예를 드리겠지만 기존에 괜찮은 

클래스가 있다. 그기능을 네가 가져다 쓰고 싶다. 라고 해서 상속을 받는건 아니에요 어 가령 에레이

리스트가 있는데 어레이 리스트를 내가 가져다가 쓰면서 스튜어던트를 만들겠다. 라고 해서 어레이리스트를

상속받지는 않습니다. 그죠 그래서 어 그래서 상속을 쓰는 경우는 이렇게 결이 같은 어 제가 결이라는 

표현을 섰는데 어째든 클래스가 일반적인 클래스로부터 좀더 구체적인 클래스 요렇게 사람이라는 클래스가 상속을 하면

어 지금 보시면 포유류가 좀더 일반적이고 사람이 포유류보다 좀더 구체적인 클래스가 되겠죠 포유류 하류에는 

사람위에도 여러가지종류의 클래스가 올수 있습니다. 그죠 네 그래서 어 확장한다는 의미에 그런 설계가 된다. 

라는거 어 우리가 인제 프로그램의 설계를 하면 애를 상속으로 가져갈 것인가 아니면 그냥 가져다가 쓰는 

포함관계로 쓸것인가 이런거에 대해서 많이 논의를 하고 고민을 합니다. 근데 상속이라는 경우는 일단은 

여러분이 기본적으로 좀더 일반적인 클래스에서 좀더 구체적인 클래스로 확장해서 쓰는경우에 사용을 한다.

라는거 그렇게 이해를 해 두시면 좋을것 같습니다. 일단 어 처음이니까 상속의 개념을 클래스의 개념을 

말씀을 드렸구요 다음에 예제를 같이 구현해 보면서 상속에서 필요한 여러가지 요소들 그다음에 구현해될 

부분들 이런것들을 같이 보도록 하겠습니다. 