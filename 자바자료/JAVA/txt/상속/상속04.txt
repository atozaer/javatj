자 요전시간에 VIP커스토머에 가격을 계산하는 부분이 아직 구현이 안됐다라고 말씀을 드렸죠 우리가 지금 보면

커스토머같은 경우는 할인률이 없지만 VIP커스토머같은 경우는 돈을 할인해 주잖아요 그죠 그러면 그 할인된 

가격을 반환해줘야 할것 같애요 calc프라이스에서 여기보시면 상위클래스에 이미 구현된 메서드가 있는데

하위클래스가 상위클래스에 상속을 받았잖아요 상속을 받았다고 해서 모든것을 그대로 쓰지는 않습니다.

모든걸 그대로 쓰지는 않구요 변수같은 경우는 당연히 값을 바꿔서 쓸수 있는것이고 메서드같은 경우는 

구현된 코드가 있잖아요 코드의 내용이 음 내가 구현할려는 하위클래스쪽에서 구현할려고 하는 내용과 

맞지 않으면 다시 구현을 할수가 있습니다. 이거를 뭐라고 하냐면 재정의한다. 오버라이딩이라고  합니다.

오버라이딩 예전에 메서드이름이 같고 매개변수가 여러개인 메서드 여러종류의 메서드를 오버로딩이라고 했죠

생성자도 오버로딩이라고 할수 있고 음 이번에는 오버라이딩입니다. 덮어쓴다 엎어쓴다라는 개념으로 이해하시면

되는데 원래 상위클래스에서 구현된 코드를 하위클래스에서 제정의를 하는데 다시 구현을 하는거죠 구현을 하는데

이때 주의할점은 반환값 메서드이름 매개변수의 타입과 갯수가 똑같아야 됩니다. 그러니까 데피니션정의부분있죠

이걸 펑션 시그니쳐라고 하는데 그 정의부분이 똑같아야 되구요 음 맞지 않을 경우는 다른 메서드로 처리가 되는거죠

다시 말씀드려서 VIP커스토머에서는 CALC칼크프라이스를 제정의할수 있다. 그럼 우리 코드에서 한번 

제정의를 한번 해보도록 하죠 패키지생성하고 kr.or.kh04 생성하고 이전에 3장까지 했던 코드를 그대로 복사하겠습니다.

자 우리가 이전에 했던 코드의 내용이 생성자 호출되는거 했었죠 생성자 출력메소드는 삭제하고요 계속 호출할때마다

나오면 여러분들이 불편하실테니까 당연히 지워주고 여기다가 칼크프라이스를 제정의를 하겠습니다. 

이전하고 달라지는 부분은 상위클래스하고 달라지는 부분은 값을 깍아준다는 부분 그부분이 있었죠 이전에 커스토머

코드를 보시면 여기 어떤 가격이 들어왔는데 이가격에 대해서 보너스포인트만 적립을 하고 그리고 가격은 바로 반환을

해줘요 결국 반환되는 이값이 이고객이 지불해야 되는 값인거죠 이고객이 지불해야 되는값인데 이제 그값을 다르게 값을

반환을 할겁니다. 데피니션을 보면 데피니션을 그대로 쓰니까 정의부분을 그대로 복사해 와서 하셔도 돼요 하셔도 되구요

또 하나의 방법은 오른쪽 마우스누르시면 이클립스에서는 소스 그다음에 오버라이딩이 나옵니다. 커스토머에서 구현된 

메소드중에 오버라이드할수 있는  메소드가 쭉 보여요 칼크 프라이스있죠 체크하시고 오케이 하시면 이렇게 나오게 

되구요 

@Override
public int calcPrice(int price){
       return super.calcPrice(price);
}

원래 있는 구현을 그대로 반환하는 그런데 우리는 이걸 바꿀거구요 그리고 지금까지 안봤던 에노테이션이라고 해서

@Override 오버라이드라고 되어 있죠 이메서드는 오버라이드된 메서드다. 이주석이 있으면 컴파일 문법적으로 디텍션은 

안되고 컴파일러에게 애는 오버라이드된 메서드다라고 알려주는 역할을 하는 에노테이션이라고 합니다. 만약에 함수의

이름이 e자를 빼면 오류가 나죠 일반 메서드인경우는 오류가 안나요 @Override에노테이션이 없으면 삭제하면 오류

날일이 없죠 오버라이드된 메서드가 아니니까 근데 오버라이드된 메서드이기 때문에 함수의이름이 바뀌면 안되는 

겁니다. 컴파일오류도 줄여줄수 있고 그래서 저희가 여기서 할일은 보너스포인트적립하는거는 똑같애요 그죠

bounsPoint += price * bonusRatio; 보너스포인트요렇게 적립을 해주구요 그다음에 돈은 깍아줘야 되잖아요 

깍아주는데 프라이스가 인트니까 price -= (int)(price *salesRatio);소수점일수 있으니까 인트로 뺀가격을 

return price; 반환을해주는 걸로 하겠습니다. 그래서 애한테 만약에 천원이다. 그러면 10프로  깍아서 900원

이렇게 할수 있도록 반환을 해주는거죠 자 이렇게 오버라이딩이 됐습니다. 됐으니까 그러면 애가 정말 잘돌아가는지

테스트코드에서 한번 볼까요 각각 1000원짜리 물건을 한번 사볼께요 int price = customerLee.calcPrice(1000); 이렇게

하고 showCustomerInfo() + price 가격을 찍어보겠습니다. 앞에는 리가 산거고 뒤에는 김이산거 

int price = customerKim.calcPrice(1000); showCustomerInfo() + price 런해보시면 이순신님의등급은 SILVER이며, 

보너스포인트는 1010입니다. 가격은 1000입니다. 김유신의 등급은 VIP이며, 보너스포인트는 10050입니다. 가격은 900

그래서 서로다른 칼크프라이스가 호출된것을 아실수가 있습니다. 재정의를 하실수가 있고 재정의된 메서드가 호출이

되는거죠 그래서 재정의해서 섰구요 애노테이션애기가 잠깐 나왔는데 원래는 주석이라는 의미고 나중에 뭐 스프링이나

이런거를 공부를 하시면 거기서 더많이 보시게 됩니다. 컴파일러에게 특별한 정보를 제공해 주는 역할을 하구요 기존에

있는 에노테이션이 조금 있어요 오버라이드된 메서드다 펑션인터페이스 함수형인터페이스 나중에 우리가 람다식을 

공부를 할텐데 그때 나올겁니다. 튜플리케이티드 좀 있다가 없어질거다. 경고가 나타나지 않도록 해라 어 여러가지 

에노테이션이 있고 그 다음에 필요한 경우 여러분이 직접 정의해서 쓸수가 있습니다.  어 지금 우리가 테스트해서 

본내용을 잠깐 말씀을 드리면 이클립스를 다시 열어 볼까요 VIP커스토머쪽에 칼크프라이스를 오버라이딩을 했어요

그리고 나서 커스토머로 생성을 해서 커스토머의 타입으로 만든 커스토머리죠 커스토머리의 경우는 칼크프라이스를 

다 호출하면 당연히 커스토머께 호출이 될거에요 VIP커스토머로 만든 KIM은 VIP커스토머타입으로 대입을 했고

이때 칼크프라이스는 당연히 VIP에 재정의된게  불리겠죠 그러면 Customer vc = new VIPCustomer(12345,"noname");

VIP커스토머로 생성을 했는데 커스토머타입으로 대입을 했죠 그리고 나서 vc라는분이 칼크프라이스 메서드를 1000원

짜리를 사게 되면 이분은 얼마를 지불해야 되느냐라는거죠 이게 바로 가상함수와 형변환 같이 재정의 이걸 같이 말씀을 

드리는건데 이 칼크프라이스는 재정의된 메서드가 있구요 그리고 VIP커스토머에서는 이 칼크프라이스를 재정의를 

했습니다. 인스턴스는 VIP커스토머고 VC라는 변수의 타입은 커스토머에요 원래 vc.해서 보면 다누구게 보이냐면 

커스토머게 보여요 지난 강의에서도 제가 말씀을 드렸듯이 그이유는 뭐냐 애가 VIP커스토머지만 커스토머타입으로

대입이 됐기 때문에 애 타입은 커스토머다라는 거죠 그러면 이때 칼크프라이스도 커스토머게 불리느냐라는거죠

가격만 한번 찍어보겠습니다. System.out.println(vc.calcPrice(1000)); 실행을 해보시면 vc가 지불해야되는 가격은 

900원입니다. 그죠 누구게 불렸어요 VIP인스턴스게 불렸죠 인스턴스게 불렸습니다. 그래서 이방식이 뭐냐면 C++가상함수

방식이구요 자바에서는 메서드라고 이야기하죠 가상메서드라고 이야기를 합니다. 어 애의 실제 인스턴스에 메서드가 

호출이 되는거에요 실제메서드가 호출이 된다. 라고 보시면되고 이부분에 대해서 좀더 말씀을 드리도록 하겠습니다.

형변환이 이렇게 됐고 형변환이 됐을때 어떤 메소드가 호출이 되는냐 아마 가상메서드가 호출이 된다. C++같은 경우는 

가상메서드인거를 표시하기 위해서 VIRTUAL버철이라는 키워드를 써야 되요 근데 자바는 따로 버추얼이라는 키워드를 

안씁니다. 그리고 자바는 모든 메서드는 가상메서드입니다. 이게 왜 이렇게 불리느냐라는것을 가상함수 가상메서드부분을 

같이 애기를 할건데 다음강의에서 메소드재정의와 가상메서드의 원리가 어떻게 돌아가는지에 대해서 말씀을 드리도록 

하겠습니다.   수업교안 마지막예제는 저와방금한예제라 같이 찍어봤는데 나몰라님이 얼마를 냈는지를 찍는 예제입니다.
