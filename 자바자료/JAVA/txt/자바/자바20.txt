반복문이 여러개 겹쳐져서 반복문안에 또다른 반복문이 있는거를 우리가 네스티드루프 중첩 반복문이라고 말을 합니다. 

중첩돼 있는거는 겹쳐져 있다는 거죠 중첩 반복문을 쓰실때 주의하실점은 너무 많이 중첩이 되면 수행속도에 문제가 생겨요 우리가 뭐 나중에 알고리즘 애기할때 제가 잠깐 애기할수도 있겠는데  우리가 for문 하나에 

대한 수행속도를 이젠 뭐 비고 표기법으로 해서 O(n)이런식으로 나타내거든요 for문이있고{ } for문안에 while문이있을수도 있고 for문이 있을수도 있죠 이런식으로 이루어지는게 중첩반복문인데 어떤 n개의 숫자에 

대해서 for while 반복문들이 수행이 일어난다 하나씩 하나씩 일어난다 그러면 요수행속도를 O(n2)제곱이렇게 나타낼수 있습니다. 만약에 밖에 for문이 또하나가 있다. 라고 하면 n3세제곱이 되겠죠 이거는 나중에 

알고리즘에대해서 이야기 할 부분인데 제가 아직 살짝 말씀을 드리는거는 for문이 많이 중첩이 돼 있으면은 그만큼 수행속도가 느려진다. 라는걸 말씀드리는거고 어 저도 이렇게 세겹이상은 써본적은 없고 간단하게 

산술문제같은 때는 다섯겹해서 잔돈 거스름돈 계산하기 이런것들은 해보긴 했습니다. 했는데 실제적으로 업무에서 쓸때는 이중for문 이정도를 가장 많이 쓰는걸로 생각하시면 될것 같구요 어 가장 전통적으로 반복문

이야기 할때 전통적으로 많이 쓰는게 구구단을 많이 해보거든요 구구단이 왜냐하면 2단부터 9단까지인데 2단안에서 2x1=2 ....이런식으로 반복이 되니까 이거야 말로 이중 반복문을 가장 많이 연습할수 있는 우리가 

잘아는 간단한 예제가 될겁니다. 어 여기 수행시간에 문제가 발생할수있다는게 제가 방금전에 말씀드린 거구요 외부 반복문과 내부반복문간의 변수값에 대해서 유의를 하시면서 코딩을 하셔야 돼요 그래서 외부에

변수가 있고 그변수가 내부에 영향을 미친다. 라고 하면 어느순간에는 그값이 변하게 될텐데 그값이 초기화돼서 내부반복문으로 들어가게 돼는 경우가 있어요 근데 그거를 잊어버리면 로직이 안돕니다. 

그래서 그런 부분을 좀 같이 보도록 하겠습니다. 구구단을 한번 구현을 해볼텐데 for문하고 while문하고 두가지 방법으로 구현을 해볼거에요 for문에서는 초기화 조건식 증감식을 한줄에 들어가기 때문에 우리가 신경을 

안쓰고 코딩을 해도 어떤 초기화들이 일어나게 되는데 while같은 경우는 초기화를 내가 직접 해줘야 하는경우들이 있습니다.  같이 코딩을 하면서 어떤부분이 유의해야 되는지 이중반복문 다중반복문 쓰실때 어느 부분을 

유의해야 되는지 한번 보겠습니다. 

실습

package생성 패키지를 나눠서 하는게 찾아보기 편하시라고 하는거니까 클래스하나밖에 없는데 패키지를 저렇게 나눠야 되나라고 생각하실수가 있는데  나중에 패키지하나에 클래스가 여러개 들어갈거에요 객체애기하고 

되면 찾기도 불편하시고 그다음에 이제 나눠서 하는 거니까 패키지나누는거 번거롭더라도 그렇게 하시면 될것 같습니다. kr.or.kh20 

클래스생성
NestedLoopTest클래스생성 메인생성 Finsh 한 다음에 int dan = 2; 부터 넣으시면 되고 int count=1; count는 1일로 할게요 일일은이 이이는사 for( ;)단은 2부터 초기화는 없으니까 빼도 되구요 내가 반복문안에 

넣고 싶다 for(dan=2;)부터 요렇게 하셔도 됩니다. 요렇게 하셔도 되고  위에 단부분을 아예빼고 //int dan;주석처리하고 for(int dan=2;)이렇게 하셔도 되구요 dan = 2;이단부터 시작해서  dan<=9 9단까지죠 9보다 

작거나 같은동안 dan++이제단이 증가할거에요 바깥for가 단이고 안에 for가 각 단에 곱해지는 값이 되겠죠 그죠 밖에 있을 for가 단이 증가하는거는 안에 있는애가 다 수행되고 나서 단이 증가하는거니까 내부 반복

문이 이일은이 이이는4 이삼은6 요렇게 될겁니다. 그래서 요기다가 다시 했고 그래서 count =1; 카운트가  9보다 작거나 같다면 count<=9 count++ 요렇게 하시면 되겠죠 요렇게 하시고 자 출력을 해볼까요 

dan X count = dan*count 여기서부터 안에 반복문이 한단을 출력하는 것이기 때문에 단하나출력하고 나서는 println()빈출력문을 쓰면 한줄 뛰기 프린트 라인이라고 쓰면 이건 게행이거든요 한줄 뛰는거 아무것도 

안쓰면 한줄이 뛰어집니다. 단마다 run해볼까요 이게 해꾸요 출력이 됐는데 2단부터 9단까지 쭉 나오죠 자 요렇게 되는거를 보실수가 있구요 그러면 이걸 while로 만들어 봅시다. while하면 자 2단부터니까 

단이 위에서 증가를 했잖아요 계속 증가를 했으니까 다시 단을 dan=2; 이렇게 해주고 이렇게 단이 while(dan<=9)작거나 같은 동안 dan++; 해줄거구요 요안에 다시 while이거는 (count<=9)작거나 같은 동안 

count++; 해주면서 count = 1; 카운트는 위에서 증가를 했으니까 다시 count=1로 다시해주시고 출력문은 똑같으니까 복사해서 가져올게요 count++위로 붙여넣을게요 자 요렇게 해서 요기까지 해서 한번 

돌려볼게요 위에 주석은 좀 처리를 하고 블럭잡고 ctrl+/로 단축키를 하면 전체다 주석처리가 되구요 run을 해보시면 자 2단밖에 안찍혔어요 그러죠 이단밖에 안찍힌걸 확인하실수가 있습니다. 왜 2단밖에 

안찍혔냐면 왜 안찍혔을까요 비슷하게 쓴것 같은데 요기 count++가 계속 증가하고 있잖아요 count는 이미 10입니다. 단이 증가해서 단은 2단 찍고 나서 단은 3이 됐어요 9보다 작죠 안에서 찍을려고 보니까 

count값이 10이되기 때문에 9보다 작지가 않아요 그래서 요안으로 안들어가는겁니다. 요기안에 count=1;로 초기화를 해주셔야 해요 for문일때는 초기화하는 부분이 요기for(count=1;)로 들어가 있기 때문에 

신경을 안쓰셔도 for(count=1)초기화가 돼서 신경을 안쓰셔도 됐는데 while로 쓰실때는 중첩반복문에서 while로 쓰실때는 들어가기 전에 내부반복을 들어가기 전에 초기화해야되는 부분들이 있는지 요런것들을 

한번씩 잘 체크를 하셔야 됩니다.  다시 실행해 보시면 이번에는 9단까지 잘 출력이 된것을 보실수가 있습니다. 개행을 안해가지고 붙어서 찍혔는데 개행을 하실거면 dan++;밑에서 빈출력을 한번하시면 되겠죠 

다시 실행하면 잘 출력되는거를 확인하실수가 있습니다. 중첩반복문을 쓰실때는 외부제어와 내부제어의 관계를 잘 생각을 하셔서 내부로 들어갈때 count변수들이죠 안에서도 쓰고 밖에서도 쓰고 초기화를 해줘야 

되는 이런 변수들 이런 변수들을 어떻게 해야 되는지 이런것들도 잘신경을 쓰시면 될것 같습니다. 자 이렇게 중첩반복문까지 살펴봤습니다. 살펴봤구요 이제 제어문의 마지막으로 우리가 switch~case에서 섰었던 

break문이 있어요 그 break문을 반복문안에서 많이 사용을 합니다. 반복문안에서 사용하는것 보시구요 그다음에 continue라는 문도 있어요 continue문 두개를  같이 반복문안에서 어떻게 사용하는지를 보도록 

하겠습니다. 




