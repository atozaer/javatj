자 이번에는 break문하고 continue문에 대해서 살펴보도록 하겠습니다. 

중간에 break문을 멈추게 하는거 멈추게 하는 거구요 continue문은 제가 무시하고 계속 진행한다라고 써놨지요 어떤 조건이 맞으면 그 이하의 반복을 수행을 하지 않고 다시 조건체크만 하게 되는 요런게 continue문이 

합니다. 계속해라 이후의 굉장히 많은 문장들이 반복을 하라고 했는데 무시하고 다시 조건체크를 하는 그런 문장이 되겠습니다. break문은 저번에 switch~case문에서도 써봤는데 반복문안에서는 애가 멈출래면 어떤 

조건이 있어야 되잖아요 if문하고 많이 사용을 합니다. 이조건이 맞는 경우에 break를 하게 되구요 빠져나오는데 요 전강의에서 중첩반복문에 대해서 말씀을 드렸어요 중첩반복문이 만약에 있다. 라고 하면 이 break문이 

중간에 어디가에 있겠죠 있다고 했을때 이 break문이 빠져나오는거는 만약에 안쪽에 내부반복문에 break문이 있다라고 하면 전체반복문이 빠져나오는게 아니구요 자기를 감싸고 있는 하나의 반복문만 빠져나옵니다. 

그래서 외부의 for문이 요렇게 있구요 내부에도 반복문이 있다고 했을때 break가 중간에 요기에 있을수가 있거든요 그런데 안쪽 for문이 빠젼나오는거는 요 전체를 빠져나오는게 아니라 요 반복만 빠져나와라 밖에 

반복문이 다시 수행이 되는거죠 요렇게 된다라는 거를 알아두시면 되겠습니다. 자 그래서 저랑은 어떤 거를 보실거냐면 숫자를 쭉 더할거에요 숫자를 더할건데 어느 순간에 1부터 쭉 더하다 보면 어느 순간에 이 합이 

100이 넘는 순간이 있을거에요 그 순간에 어느 숫자냐 몇까지 더해야 100이 넘느냐 저희가 그게 궁금한거에요 그걸한번 출력해 보자 라고 했을때 그냥 for나 while을 써서 쓴 경우랑 그 다음에 break를 쓴 경우의 차이에

대해서 한번  살펴보도록 하겠습니다. 네 예제 같이 해보시죠 

실습

package생성하기 kr.or.kh21 만들기

class생성하기 BreakTest ->main생성한다. ->Finish피니쉬생성

int sum = 0; int num = 1; 이렇게 하시구요 만약 초기화를 안하겠다.그러면 선언만 하고 for(num=1; sum <= 100;)sum이 100보다 작거나 같은동안 100이어도 상관없어요 근데 100을 넘어가는 순간이 언제냐는거죠

뭐 요렇게 쓸수가 있을 거에요 그죠 num++ 하면서 sum +=num; 요렇게 했어요 이때 sum의 값과 num얼마였니라는거죠 요렇게 for문을 배웠었고 우리가 요렇게 사용할수 있다는 걸 아는데 이때 run을 해보면 

100이 넘는 순간은 105고 이때 넘의 값이 15냐 라고 했을때 생각해보면 15는 아닙니다. 왜냐면 여기 값을 더했죠 더하고 나서 num++;되고 나서 체크를 한다고 그랬죠 그죠 아마도 이때는 14였을 거에요 14

였는데 조건체크 증감하고 나서 조건체크를 나중에 하니까 값이 증가해 버린 거죠 그러면 sum<=100요거를 빼고요 sum+=num; 더하고 나서 if물어보는거에요 sum이 100보다 크거나 같냐(sum>=100)  밑에다가 

break; 해라 요렇게 이렇게 하면 100보다 크거나 같은 경우에 멈춰라는 애기구요 run을 해보시면 105가 되고 이때 num값은 14다 결국은 14까지 더하면 100보다 큰값이 되는 순간이다. 라는걸 딱 catch캐취할수

가 있는거죠 그냥 for문을 썻을때는 num이 이미 증가하고 나서 조건을 체크를 하기 때문에 우리가 원하는 실제로 얼마인순간이 100을 넘느냐라는거를 아실래면  중간에 빠져나와야 합니다. 그때 break를 요렇게 

쓴다. 라는걸 알아두시면 될것 같습니다. 네 그다음에 나오는게 continue문이라고 했는데요 마찬가지로 조건문하고 많이 씁니다. break처럼 조건문하고 쓰게 되구요 조건이 맞는 경우에 말씀드렸듯이 어떤 문장들이 

있다라고 해도 그문장을 무시하고 다시 제어가 조건체크를 하는쪽으로 넘어간다. for에 조건체크하는 쪽으로 넘어간다. 라고 말씀드렸습니다. 여기에 	1부터 100까지 숫자중에 3의 배수를 출력하세요 라고 제가 해 

놨어요 그러면 3의 배수가 아닌경우에는 출력을 할 필요가 없다는거죠 그죠 반복문안에 출력문이 들어갈건데 3의 배수가 아닌경우엔 출력을 하지 않을 겁니다. for(num=1; num<=100;)for넘은 1부터 시작해서 쭉 

증가해요 100까지 100까지 증가를 할건데 num++시키면서 자 이게 나머지 연산자라고 말씀을 드렸죠 그래서 나머지 3으로 이숫자(num)을 3으로 나눈 나머지가 0이 아닌경우 0이면 3의 배수죠 근데 0이 아닌경우 

는 3의 배수가 아니라는 애기죠 continue라고 써요 이거는 요기 밑에 있는 애들을 두고 무시하고 다시 제어가 위로 올라와서 num++; 넘++하고 num이 100보다 작거나 같으냐 요렇게 체크를 한다는 겁니다. 이제 

아시겠죠 continue는 이럴때 쓰는 겁니다. 계속 하란 애기여서 if밑에 출력문을 계속하라는 애기는 아니고 애네들은 무시하고 다시 제어를 반복문의 증감과 비교로 넘기는 요런것들이 continue입니다. 요것도 같이 

저랑 같이 해보도록 하겠습니다. 이클립스가셔가지구요 요번엔 패키지 안만들어도 돼죠 ContinueTest 메인넣으시고 Finish피니시합니다. int num; for(num=1; num<=100;num++)보다 작거나 같은 동안 num++

시킨다.  자 요렇게 해서 자 출력을 할건데 if(num%3!=0) continue; num을 출력하기 전에 체크를 해요 if를 넘에 나머지% 3 했을때 이값이 0이 아니면  그럼 결국 이애기는 뭐냐면 애가 3의 배수가 아니다 아닌거고 

continue; 그렇지 않으면 continue가 아니니깐 아래로 내려오겠죠 num출력을 합니다. run을 해보시면 3의 배수가 잘 출력이 되는걸 보게 됩니다. 요렇게 continue가 쓰인다라는 걸 아실수가 있고 여기서 하나 

말씀드리고 싶은게 num%3 !=0 요런경우에 연산자 우선순위에 의해서 애가 먼저 수행이 됩니다. 그리고 0과 같지 않다. 이거를 붙여 써도 상관이 없어요 다 실행이 되는데 좀 ( )를 쳐주시는게 (num%3)이게 

가독성이죠 이런게 좋다. 제가 인제 가독성 가독성 애기를 하는데 그래서 저 선생님 왜 자꾸 저런 애기 하지라고 생각하지 마시고 자꾸 습관화 하셔야 해요  코딩이 습관이어서 한번 습관이 들어버리면 처음에 

시작할때 습관이 들어버리면 나중에 이걸 고치는게 굉장히 힘듭니다. 그래서 습관이니까 요런것좀 신경을 쓰시고 다시 continue를 말씀드리면 (num%3)!=0요개 true면 num++로 제어가 넘어가는거구요 

이게 false인 경우에는 요밑에 있는 num출력문이 수행을 하게 됩니다. 수행문이 100개든 200개든 간에 무시하고 계속 num++과 num<=100여기를 수행 제어가 넘어간다.  라는걸 이해하시면 되겠습니다. 

자 그래서 우리가 긴이야기를 했는데요 21장까지 말씀을 드렸구요 자바 기초 시작하는 부분이 다 마무리가 됐습니다. 여기까지 말씀드렸고 다음강의부터는 이제 실제적으로 객체에 대해서 말씀을 드릴거에요 

지금까지는 사실은 오브젝트 오리엔티드 프로그래밍을 한거는 아니고 언어의 기본적인 자료형이라든가 제어문이라든가 연산자라든가 요런것들을 말씀을 드렸어요 이부분은 다른언어도 굉장히 많이 비슷합니다. 

대동소이 하기 때문에 잘알아두시면 다른언어배우실때도 굉장히 편하실거에요 그리고 만약에 다른언어들을 굉장히 잘하신다. 라고 하면 이부분은 슬쩍 보고 넘어가셔도 크게 상관이 없겠죠 다음 2장부터 이제 

객체에 대해서 이야기 할테니까 또 재미있게 공부를 해보도록 하겠습니다. 











