자 이번시간에는 관계연산자와 논리연산자에 대해서 보도록 하겠습니다. 

관계연산자는요 두항의 관계를 나타내는 연산자데 다른말로 비교연산자라고 하고요 주로 연산의 결과가 true,false 두가지로만 나타나게 됩니다. 

우리 예전에 부등호라는거 많이 배웠었죠 예전에 수학시간에 그런것처럼 더크냐 더작냐 크거나같냐 작거나같냐 이거는 같은지의 여부를 물어보는거구요 

이거는 같지 않다. 라는거에 대한 결과값이 true,오알false 가 반환이 되게 되구요 여기 연산예에 보면 요런식으로 쓴다라고 되어 있는데 어디서 많이 쓰냐면 

우리가 요 다음시간에 연산자가 끝나면 제어문에 대해서 할건데 제어문의 if나 while문안에 조건식이 들어가게 됩니다. 그 조건식에서 많이 사용하게 됩니다. 

연산자 사용하는 방법은 어렵지 않기 때문에 예제만 보고 넘어가도록 하게요 실습을 따로 하지 않고 num1=5고 num2가 3이다. 라고 했을때 자 (num1>num2)

라고 비교하게 되는 거죠 비교하게되면 이결과값이 뭘로 반환이 되면 이 결과값이 뭘로 반환이 되면 블리언으로 반환이 됩니다. 우리가 지난 시간에 블리언 타입

에 대해서 배웠죠 그래가지고 어 참이냐 거짓이냐 두개의 결과값을 갖게되는 블리언 타입으로 변수를 선언하면 이 변수에 true나 false값이 이제 들어오게 되는거죠 

출력을 해보시면 출력결과도 제가 밑에다가 같이 넣어놨습니다. 이제 true이렇게 나오고요 이제 더 크다 작다를 비교하는 연산자들이 있습니다.  결과는 밑에 보시면 

알것 같고 맨 마지막에 보면 같지 않다 라고 했을때 true라는결과가 나오죠 같다(==) 라는게 수학에서는 같다라는거를(=)연산자 하나만 쓰지만 프로그램에서는 

대입연산자가(=) 되는것이고 ==두개가 있는 경우가 같은지의 여부를 체크하는 연산자가 되겠습니다. 이게 관계연산자구요 앞으로 많이 쓸거에요  어 이렇게 되있는거구나 

여러분이 인식하시면 될거 같구요 그 밑에 논리연산자를 보시면 주로 관계연산자 혼합해서 많이 사용합니다. 논리연산자도 연산의 결과가 true,false 둘중에 하나가 되는데 

논리연산자 보시면 논리곱, 논리합, NOT부정 이것도 예전에 수학시간에 명제라는것 배우셨죠 그거랑 비슷한 연산자라고 보시면 됩니다. 논리곱인 경우에는 두항의 결과가 

모두 true일때만 true인거죠 하나라도 false이면 그결과가 false인거구요 논리합인 경우에는 두항의 결과가 둘다 false인 경우에만 false 둘중에 하나만 true이면 true가 되는거죠

!(not)은 true이면 false로 false이면 true 인 연산자가 되겠죠 밑에 예제를 보시면 두수를 선언을 했구요  num1과 num2는 선언을 했구요 10하고 20이 있는데 둘다 0보다 크다라고 했을때 0보다 큰게 맞죠 

이결과가 and 논리곱의 연산자이기 때문에 true가 될겁니다. 하나는 크고 하나는 작다. 라고 했을 때 둘중 하나는 부정이 되니까 false가 나올거구요 논리합인경우에는 여기서 보시면 두 항중 하나만 true이면 되니까 

요것도 맞을 것이고 요거는 뒷쪽의 연산의 결과가 맞죠 둘다 true의 결과가 나올것입니다. 그다음에 true는 false, false면 true의 결과가 나오는게 ! not이라는 연산자다 요렇게 연산자들이 있는데 

나중에 우리가 계속 우리가 많이 쓸거구요 마지막으로 하나 우리 연산자들에게 하나 생각해보야야 되는게 뭐냐면 논리연산자 쓰실때 혼돈하실수도 있고 내가 의도치않은 결과가 나오는 경우가 있어요 

그런경우에 대해서 하나 말씀을 드리도록 하겠습니다. 방금전에 논리연산자같은 경우는 논리곱과 논리합이 있는데 논리곱같은 경우는 둘다 true일때만 true라고 했죠 그런데 만약에 앞에 뒤에 

항이 두개가 있다는거죠 앞에 항이 이미 false가 나왔어요 false가 나왔다고 하면 뒤에 항의 결과를 볼일이 없습니다. 왜냐하면 앞이 이미 false이기 때문에 결과는 뒤에 보나마나  false인거죠 그죠

논리합같은 경우에는 두 결과가 나와 있는데 두 항이 있는데 앞에가 true가 나왔다. 뒤에는 이때도 볼필요가 없는거죠 그죠 뒤에 항까지 봐야하는 경우는  앞에가 false일때 뒤에가 true이냐를 봐야하는 것이죠 

그래서 이렇게 논리합과 논리곱인 경우에는 연산이 다 이루어지지 않고 결과를 가져오는 경우가 있어요  이런경우를 뭐라고 하냐면 단락 회로 평가라고 이야기를 하거든요 우리가 프로그램을 할때 생각을 해보면 

내가 코딩한게 다 결과가 이루어지겠다. 이게 인제 평가(evaluation)된다라고 이야기 하는데 이게 다이루어지겠다라고 생각을 하지만 실제적으로 컴퓨터입장에서는 앞에 항이 이미 false이면 논리곱인 경우에는 뒤에항을 

볼필요가 없잖아요 내가 결과만 가고오면 되니까 뒤에 항에 연산은 이루어지지 않는다라는 겁니다. 이런예제를 밑에다가 써놨구요 이거는 같이 코딩을 해보면서 시작하도록 하겠습니다. 

실습

그래서 우리가 이런 경우에 모든 연산이 이루어지지 않을수 있습니다. 제가 예제를 싫어놨으니까 한번 보시면 되겠습니다. 









