반복문중에 가장 많이 쓴다는 for문에 대해서 알아보겠습니다. 

for문같은 경우는요 while문 같은 경우는 조건식이 하나씩 들어가 있는데 ( )안에 for문이 문장이 3개가 들어가요 그래서 여러분들이 처음에 for문을 보면 뭐 이렇게 생겼지라고 생각하실수도 있습니다. 

그런데 자꾸 쓰다 보면 몇개의 횟수에 카운트에 따라서 몇번 반복을 해라라는거에 가장 편안하게 쓸수있는 문장이 for문이구요 특히 우리가 나중에 자료구조 같은거 배우면 거기에 데이타의 갯수가 

있어요 그 갯수에 따라서 어떤 액션을 한다 라든가 반복수행을 한다 라고 하면 for문을 가장 많이 쓰게 됩니다. while문하고 같이 가장 많이 쓰는 반복문이기 때문에 잘 이해를 해 두시고 그다음에 for

문을 활용해서 자유자재로 프로그램을 하실수 있어야 겠죠 

자 여기 잠시 보시면 제가 for문이 어떻게 돌아가느냐에 대해서 잠시 말씀을 드릴게요 for라고 쓰고 ( 괄호를 씁니다. 맨앞에 여기쓰는게 초기화식이라고 했는데 이니셜라이즈를 한다고해요 옆에 그림을 

보시면 num이라는 숫자가 있는데 num이라는 숫자를 1이라고 초기화를 했습니다. 그다음에 이게 하나의 문장이에요 여기 뒤에다가 ;세미콜론을 이렇게 찍으셔야 해요 세미콜론찍으시고 조건이 있습니다.

while들어가기 전에도 조건이 있잖아요 그거랑 마찬가지로 for들어가도 조건이 있는데 이조건식은 두번째에다가 쓰시면 됩니다. num이 10보다 작다 num이 5보다 작다 이런식으로 해서 여기 조건이 있죠

여기에 조건은 num이 5보다 작거나 같은동안 이렇게 되죠 요조건까지 만족을 하면 우리가 while들어가기 전에도 조건을 만족을 하면  반복수행을 하잖아요 조건이 만족이 되면 반복문이 수행이 됩니다. 

for{ }구조안이 수행이 되는거에요 수행이 되는데 수행을 하고 나서 그다음에 뭘하냐면 어떤 while문에서도 그 숫자가 변환다고 했잖아요 조건에 해당되는 숫자가 점점 커진다거나 점점 작아진다거나 

이런일들이 일어나는데 그걸 증감식에다가 써놔요 수행한다음에 이증감식을 한번은 수행을 해요 수행을 하고서 이거에 대한 조건이 맞는지를 왼쪽에 조건식에서 한번은 더 채크를 합니다.  정말 햇갈리죠

num이 1이고 이니셜라이즈를 했어요 이니셜라이즈는 초기화를 한번만 해요 한번만 여러번하지 않고 한번만 하구요 그다음에 num이 5보다 작으면 조건체크를 합니다. 조건 체크를 한다음에 작으면

출력을 하고 출력한 다음에 num을 증가시킵니다. ++하면 증가가 되는거죠 하나 증가시킨 다음에 체크를 해요 5보다 작냐 2가 됐으니까 작겠죠 그럼 또 num을 찍어요 또 증가를 해요 또 체크를 해요 

여기 트라이앵클로 반복이 되는 겁니다. while문으로 했다라고 하면 이게 while문으로 했다라고 하면 이게 여기에 있지 않구요 여기 밑에 출력문에 있겠죠 { }중괄호안에 명령문으로 있을것이고 num++

문장안에 있는것이 아니고 while문으로 했다면 num=1이니셜라이즈초기화가 위에 있을 거에요 for문 같은 경우는 초기화식 조건식 증감식 왼쪽의 문장을 보시는것처럼 한줄에다가 둡니다. 

이게 굉장히 보기 편한게 뭐냐면 아 조건에 의해서 이런 상황이 발생을 하면 이렇게 체크가 되는구나라는거를 한눈에 볼수가 있구요 특히 카운팅을 할때 굉장히 많이 씁니다. 이게 증가되는 변수가 바로 

옆에 있고 대부분 이증가되는 변수를 많이 비교를 하게 그렇게 해놓죠 요런게 for문이다 라는걸 보구요 요게 하나하나의 문장이기 때문에 여기에다가 ;세미콜론을 쓴다. 라는거 기억하시면 될것 같습니다. 

역시나 문장이 하나일때는 중괄호를 안쓰셔도 되지만 중괄호 쓰시는 연습하시고 for문은 초기화만한번 하면 되지 나머지는 삼각형으로 반복이 되고 조건이 맞지 않으면 다음 제어쪽으로 밖으로 나온다. 

라는거 여러분이 이해해두시면 될것 같습니다.  저랑 1부터 10까지 더하는 결과에 대해서 아까 while문으로 작성을 해봤잖아요 이번에는 for문으로 작성을 하면서 두개를 비교를 하면서 어느게 더 가독성이 

좋고 어느게 쓰기 편한가 좀 살펴보도록 할게요 

실습 

이클립스를 여시고 

int count=1; 카운트변수를 1로 주고 sum이라는 변수를 0으로 주고 초기화를 했지요 for로 만들면 카운트를 직접 쓰셔도 되고 우리가 전통적으로 카운드를 많이 할때 그리고 배열하고 같이 쓸때 0부터 많이 시작을 해요

많이 쓰는 방식은 i<10 요렇게 많이 쓰는데 이게 어떤의미가요 라는 거는 제가 조금있다가 다시 말씀을 드리도록 하겠습니다. 어 지금 보시면 우리가 더할려는 수는 카운트구요 카운트가 1부터 시작을 해요 1부터 시작을 

하고 카운트가 12345678910일때까지 계속 더해 줄거에요  sum+=count 요렇게 할건데 자 보시면 i의 역할이 뭐냐 이건 횟수에요 횟수 몇번 몇번을 할거냐 물론 카운트를 쓰셔도 상관은 없습니다. 카운트를 여기 제어문

안에서 핸들링을 하셔도 상관은 없는데 제가 횟수를 체크하는 변수를 따로 뒀어요  i는 0부터 10보다 작다라고 하면 10번이죠 그죠 0123456789니까 그래서 컴퓨터에는 0굉장히 중요하다고 했잖아요 0부터 시작하는 경우가

굉장히 많습니다. 0부터 시작을 해서 사용되는 숫자보다 작은거 요렇게 많이 표현을 해요 요렇게(int i=0; i<10;) 많이 횟수가 표현이 되요 0부터 10보다 작은동안 그럼이게 딱 10번도는구나 라는걸 딱 알수 있어요 물론 

요것도 가능하긴 합니다. int i=1; 요것도 가능하긴 한데 이런 표현을 많이 쓰지는 않아요 이런표현보다는 int i=0;부터 조건도 i<10 작다라는 표현을 쓰지는 않습니다. 자 요렇게 하고 자 i++,count++이렇게 쓴이유는 

문장이 하나 이상 들어갈수도 있습니다. 초기화식도 마찬가지에요 for(int i=0,count=1)이렇게 초기화를 쓸수도 있어요 위에 초기화를 하지 않고 반복문안에다가 초기화를 할수도 있어요 인티져로 i랑 카운트를 선언을 해서 

i는 0카운트는 1이렇게 초기화를 하실수도 있어요 쉼표를 쓰시면 초기화를 하실수도 있는데 이것도 너무 많이 쓰면 지저분해 보이겠죠 그러니까 되도록이면 깔끔하게 쓰시는게 좋습니다. 그럼 원래대로 int count=1;이렇게

쓰시구요 이제 증가를 해야 되는데 i도 증가하고 카운트도 증가를 합니다. i는 0부터 증가를 하는거구요 카운트는 1부터 증가를 합니다. 어째든 i나 카운트는 10까지 증가를 할것이고 10번반복해서 합이 만들어지겠지요 

sum을 출력을 해보시면 합이 잘출력이 되요 요렇게서 for로 만드는거랑 while로 만드는거랑의 차이를 한번 보도록 하겠습니다.  int num은 1이라고 하구요 int total은 0이라고 합니다. while은 num이 10보다 작거나 같다

아까 while 에서 했던 똑같은 로직이죠 total += num++; 하실수도 있어요 넘 햇갈리죠 연산자가 많으니까 num++밑에다가 작성하면 되죠 그래서 1부터 계속 더해주는데 언제까지 num이 10보다 작거나 같으면 당연히 num

이 11이 됐을때 빠져나오겠죠 total토탈을 출력하면 둘다 55가 나옵니다. 둘개가 크게 차이가 없어요 차이가 없는데 이제 여러분이 보시기에 위에 처럼 반복문이 돼 있으면 깔끔하고 횟수에 대해서 또하나는 요렇게 많이 

쓴다라는거 0부터시작해서 반복되는 횟수보다 작다라고 많이 쓴다. 좀 익숙해 지시면 되겠구요 몇번돈다 횟수에 의해서 돌때에는 사실은 for문을 가장 많이 씁니다. 여기보면 증감에 대한 부분 이니셜라이즈부분 int num=1;

여기다 해줬죠 바깥에다 해줬고 쭉 들어갈수 있는 for( )안에 여러문장이긴 하지만 쭉 들어갈수 있는 부분을 밖에서 한번 초기화를 해주고 조건체크하고 반복문안에서 증감하고 요렇게 구현을 하거든요 음 편하신걸로 쓰시다가

for문이 익숙하시면 카운팅에 대한부분 제가 for문을 무조건 쓰시라는건 아니고 어떤 증감에의해서 횟수에 의해서 이루어지는 반복문을 for문을 쓰시는게 훨씬 효율적이고 편하실거다 라고 말씀을 드리는겁니다. 

자 그래서 제가 잠깐 정리를 했어요 각 반복문을 언제 사용하나요 이런질문들을 가끔하세요 반복문이 여러개가 제공되고 있는데 그 여러개의 반복문들이 약간약간 다른건 같기도 하고 질문을 하시는데 이거는 꼭 이렇게 써라 

는건 아닙니다. 이렇게 쓰셔라는 건 아니고 주로 이런경향으로 쓴다. 라는걸 말씀을 드리는거구요 do~while문은 다른 반복문과는 분명 제어가 달라요 제어가 달르기 때문에 조건을 무조건 조건이 참인동안 반복을 수행하지만 

수행문이 한번 수행될때 do~while을 쓰시는거고 조건이 참인동안 반복하는거는 3개다 동일한데 while문하고 for문의 가장 큰 차이는 while은 이런경우에 많이 써요 플래그값을 체크한다거나 조건식안에 값이 있어서 그값이 

true인 동안 돌아라 어느순간 값이 false가 될수도 있거든요 그런 경우에 많이 쓰구요 조건식의 결과나 어떤 변수값이 true인경우나 false인경우 많이 쓰고 for문같은 경우는 아까 말씀드렸듯이 특정 횟수와 관련해서 특히 배열

같은 거와 관련해서 많이 사용합니다. for문의 문장들이 생략이 가능합니다. 초기화할일이 딱히 없다. 밖에서 초기화를 해버렸죠 초기화할일이 없으시면 초기화식을 생략하시면 됩니다. 반드시 세미콜론을 하셔야 해요 세미콜론을 

생략할수가 없고 조건식이 생략할경우가 가끔있습니다. 이거는 뭐냐면 for문안에 조건문이 들어가는 경우가 있어요 우리가 조금있다 break다음에 break나 continue를 이야기를 할텐데 그럴경우에는 조건문이 아예안에 들어갑니다. 

이 조건을 생략하고 if(sum>200)이조건문에 의해서 제어가 되도록 그렇게 하는 경우들이 있구요 그 다음에 증감식도 생략할수가 있는데 이런경우는 이제 아까 보셨지만 보기가 복잡한 식이 들어갈 이공간이 명령문이 들어갈 공간이

스테이트먼트가 들어가는데 여기가 너무 복잡하면 그것도 미더빌리티(가독성)이 떨어집니다. 가독성이 좋지가 않아요 그래서 약간 복잡한 식이 이 제어에 영향을 미친다. 여기 i 값이 ++해서 10의 나머지로 i를 셋팅한다. 라고 하면 

그때는 요거를 바깥에다 빼놓는게 보기 좋다. 이걸 증감식에 쓴다고 문제가 되지를 않습니다. 근데 이렇게 할수도 있다. 라는 거구요 while(true)라고 하면 무한반복을 한다라고 말씀드렸던 것처럼 for문도 for문안에 명령문 스테이트먼트

를 하나도 쓰지 않으면 무한반복을 하게 됩니다. 음 우리가 서비스같은 거 돌릴때 데몬이라고 하죠 그럴때는 서비스가 살아있어야 되잖아요 서비스가 죽으면 안되니까 웹서버 같은 경우는 무한반복으로 돌아가죠 그럴때 이제 for랑 while에 

true 이렇게 쓰시면 됩니다. 어 잠깐 이제 햇깔리시는 분이 있어서 잠깐 여러분들이 햇깔리시는 분들이 있어서 제가 여기 코멘트를 넣어놨는데 이거는 햇깔리시믄 안돼요 i가 10이라고 있어요(i=10) 내가 i+1이다. 요렇게 섰습니다. 그러면 

요 값의 결과를 프린트를 해보면 print(i+1)이렇게 하면 애는 11이나옵니다. 그때 i값이 11이되느냐 그렇지 않아요 i는 그냥 10입니다. 10 i값에다가 1을 더한거를 출력을 한것이죠 항상 말씀드리지만 i값을 증가시키고 싶으면 i값을 증가시키고 

싶다  i+=1; 요렇게 요런식으로 하셔야 한다고 말씀을 드렸고 i++;은 다릅니다. 애는 증감연산자에요 요거와 똑같은 의미(i+=1;)라고 말씀을드렸죠 i=i+1; 요거랑도 같은 의미입니다. i+1과 i++은 전혀 다릅니다. 가끔씩 i+1이라고 쓰고 왜 값이 

증가되지 않지 라고 생각하시는 경우가 있는데 증가를 시킬려면 i++요렇게 쓰시거나 대입연산자 i+=1;를 반드시 쓰셔야 된다. 이거를 비트연산을 할때에도 말씀을 드렸을거에요 가끔햇갈리시는 분들이 있으셔서 제가 다시 한번 말씀을 드렸

습니다. 자 이제 반복문을 배웠는데요 예제를 여러개를 다루지를 않고 이렇게 돌아간다라는걸 말씀을 드리고 어짜피 뒤에 가서 많은 예제들과 함께 스터디를 할꺼니까 반복문을 이야기하다보면 반복문이 중첩되서 쓰이는경우가 있습니다. 

중첩반복문인데 다음강의에 말씀을 드리도록 하겠습니다. 





 







 
 








