네 제어문중에서 반복문에 대해서 말씀드리도록 하겠습니다. 

지난 시간까지 조건문을 말씀을 드렸구요 오늘 반복문을 할건데 반복문에는 크게 3가지가 있습니다. 이건 다른언어들도 비슷하거든요 while문 do~while문 for문 이렇게 세가지가 있는데 

세개가 다 반복을 한다. 그 로직은 똑같구요 그중에서 반복문이 주로 쓰이는 경우들도 있고 do~while문은 조금 쓰임새가 다르긴 한데 do~while문이 쓰이는경우도 있고 for문이 쓰이는 

경우도 있습니다. 그래서 그런것들을 좀 보구요 그 다음에 반복문은 우리가 프로그램을 할때 조건문과 함께 굉장히 많이 쓰이는 제어문입니다. 반복문이 잘 이해가 안된다. 라고 하면 

반복해서 학습을 하셔야 합니다. 반복문 보시구요 그 다음에 다른 반복문들 while문 먼저 볼건데 다른 반복문들과는 어떤 차이가 있는지 같이 살펴보도록 하겠습니다. 

반복문에는 조건이 들어가요 그 조건이 참인동안 true인동안 계속 동일한 반복문을 수행을 하는거죠 어떤 일을 해라 라고 지정돼 있는 것들이 있는데 그 지정돼 있는 명령어 셋이겠죠 

우리가 프로그램을 한것이고 개네들이 어떤 동안 조건이 참인 동안만 수행을 하라는 겁니다. 당연히 조건이라는거는 어떤 체크가 들어갈것이고 그 조건에 대한 값도 반복문안에서 대부분

많이 변화합니다. 그래야지 이젠 그조건이 점점 한계에 다다라서 어느순간 false가 되면 반복문수행이 끝나겠죠 조건이 만든동안 지정된 수행문을 반복적으로 수행하는 제어문인데 조건이

맞지 않으면 반복하던 수행을 멈추게 되구요 우리가 많이 보는 여러가지 프로그램등에 당연히 반복문이 있습니다. 뭐 자동차가 달리는 것도 마찬가지고 그다음에 일정횟수만큼 돌아가는 

나사못이라든가 우리가 온도를 조절하죠 에어콘이나 온풍기나 이런것들을 조절을 하는데 그온도가 얼마이상 얼마이하 까지만 돌아라 라는 조건을 우리가 주잖아요 그럼 그조건까지만 

가동되는 이런것들 다 반복문과 조건에 의해서 조건이 참인동안 수행이 된다. 라고 보시면 됩니다. 음 구문은요 이렇게 쓰시면 돼요 while쓰시구요 조건식을 쓰시는데 조건식은 어떤 

하나의 변수일수도 있어요 그 변수에 값이 0이냐 0이 아니냐의 따라서 0이 아니라면 참이라고 인식을 하거든요 0인지 아닌지에 따라서 될수도 있구요 아니면 여기에 그전에 우리가 배웠던

관계연산자라든가 비교연산자 그다음에 논리연산자 이런것들이 들어가서 그결과가 참이냐 거짓이냐에 따라서 판별이 되기도 하지요 조건식이 들어가구요 마찬가지로 스테이트먼트 반복되는 

문장이 하나이면 중괄호를 쓰지 않으셔도 됩니다. 근데 제가 조건식에도 말씀을 드렸듯이 조건문때에도 말씀을 드렸듯이 수행문이 하나래도 중괄호를 쓰시는 연습을 하셔라 말씀을 드렸고 

그다음에 들여쓰기 반드시 하시라고 했죠 이클립스가 당연히 들여써주지만 우리가 항상 들여쓰기를 해야 된다. 라는걸 명심을 하시구요 그래서 이렇게 쭉 수행이 되다가 당연히 이조건에 대한 

어떤 값이 증가한다라든가 감소한다라든가 값이 맞지 않다라든가 뭐 이런 조건이 while( )안에 들어갈텐데 이 안에서 대부분 그값들이 조정이 됩니다. 조정이 되서 점점 그 값이 증가한다든가 

감소한다든가 이런 일들이 일어나죠 조건이 참인동안 계속 돌다가 조건이 맞지 않으면 거짓이되면 이 while( )안에 결과가 false가 되면 이제 여기를 빠져나와서 수행문2가 진행이 되는 겁니다. 

옆에 flow chart를 보시면 바로 while문이구요 따로 설명을 드리진 않을게요 그래서 간단하게 예제를 하나 코딩해 보면서 우리가 while문이 어떻게 쓰는지 한번 보도록 하겠습니다. 

실습

package생성 kr.or.kh17 로작성

클래스작성 WhileTest로 작성 main작성하기

우리가 지금 해보고자 하는 예제는 1부터 10까지 한번 더해 볼거에요 1부터 10까지 더할때 하나더하고 하나더하고 statement먼트 10개 쓰면 되긴 하겠죠 그죠 문장을 10개쓰면되는데 그럴때

반복문을 쓰는거죠 문장10개를 쓰는게 아니라 하나의 문장이 반복되게 숫자만 늘려주면 되잖아요 네 그렇게 만들어보도록 하겠습니다. 우리가 증가되야될 숫자가 있으니까 num이라고 표현을 

하고요 그리고 우리가 더해줄거죠 계속결과를 더해서 그결과를 나올거니까 그걸 sum이라고 해볼게요 while해서 num이 1인데 10보다 작거나같은 경우 그러면 이 while문을 빠져나오는순간 num값을

11이 될겁니다. 그죠 그래서 어떻게 하느냐 sum에다가 num을 해주구요 그다음에 num++값을 하나 증가해야 겠죠 아까도 말씀드렸듯이 while문의 블록안에  대부분 조건에 해당되는 변수들에 변화가 

있어요 값이 증가한다거나 감소한다거나 이것은 증가를 해야 하나씩 하나씩 증가를 해서 10보다 작은 동안이에요 while문이 돌것이구요 오류난거는 좀있다 저랑 같이 볼게요 시스템아웃점프린트라인

합이 얼마지 여기다가 찍어보고 숫자가 얼마지 찍어볼텐데요 여기서 sum에 부분에서 오류가 난 이유는 뭐냐면 우리가 프로그램을 할때 이런걸 주의하셔야 해요 주의하셔야 되고 나중에 객체쪽에 들어가면 

변수를 다른변수를 배울건데  멤버변수라는걸 배울겁니다. 멤버변수랑 지역변수는 좀 달라요 지금 중괄호{ } 안에 들어가서 여기에 선언되있는 이걸 우리가 주로 블럭이라고 이야기를 하는데 블럭안에 선언

되있는 변수는 지역변수입니다. 지역변수죠 지역변수같은경우는 자동화로 초기화가 되질 않습니다. 초기화가 되질 않아서 sum에 num을더하랬는데 sum이 얼마지 모르는데 num을 더하라니까 어디다가 멀 

더할지 모르는거죠 지역변수는 대부분 반드시 초기화를 해주셔야 돼요 sum이 처음에 0이었다. 라고 해줘야 아 0에다가 num의 값을 더하는구나 애를 인식을 하지 이렇게 안써주면 도대체 sum이 얼마데

1을 더하라는거야 라는 거죠 sum의 값을 지정할수 없잖아요 이런 지역변수는 초기화하는거에 신경을 많이 쓰셔야 돼요 자그리고 나서 이렇게 run을 해보시면 아 sum이 55가 나왔죠 네 1부터 10까지 더하면 

55가 되고 빠져나왔을때 num의 값이 11이되는걸 아실수 있습니다. 요렇게 이젠 반복적인 문장을 쓸때  우리가 while문을 쓴다. 라는거를 살펴봤구요 음 다른 반복문들하고 이제 하나씩 하나씩 배우면서 

제가 비교하면서 설명을 드리도록 하겠습니다. 그리고 그거 다음에 do~while문에 대해서 한번 살펴보도록 하겠습니다. 



