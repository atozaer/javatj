네 이번시간에는 이젠 정보은닉에서 좀더 추상화된 개념으로 인캡슐레이션을 볼텐데요 

마찬가지로 프라이빗이나 프로텍티드 키워드를 이용해서 정보를 하이딩을 하는겁니다.

캡슐화는 이보다 더 객체를 좀더 감싸서 꼭 필요한 여기 여러가지 메서드들이 있는데

그메서드들 중에 외부에서 사용할 꼭 필요한 메서드 한두개만 오픈해서 그리고 나머지는 

자동으로 모든것이 생성될수 있도록 그렇게 만드는 그런용도로 사용하실수가 있습니다.

여기서 이젠 예제로 보시면요 캡슐화의 정의도 역시 마찬가지로 정보를 감싸서 외부에 

꼭 필요한 정보만 오픈한다. 라는 개념으로만 보시면 되구요 대부분의 멤버변수와 메서드는 

인제 감춰요 외부에 통합된 인터페이스를 제공을 해서 클라이언트가 좀더 사용하기 쉽게 

사용할수있는 코드쪽에서 아 요것만 쓰면 이게 자동으로 만들어지는 요런 일관된 기능들을 

제공할수 있도록 합니다. 이런경우에는 클라이언트가 거의 제어할수 있는 부분이 굉장히 

적기 때문에 캡슐화가 잘되있는 객체같은 경우는 클라이언트에서 쓸수 있는 api가 한정적이기도 

하구요 그다음에 그 객체가 하는 기능이 어 메번 일관성있게 제공될수가 있습니다. 또하나의 

장점은 오류에 대한 디텍션을 클라이언트코드와는 상관없이 서비스가 제공하는 객체쪽에서 

오류에 대한 디텍션이나 아니면 객체에 대한 업그레이드 이런것들을 하면 되기 때문에 오히려

디버깅이나 응 기능을 추가하는데 유연하다고 보실수가 있죠 그니까 여러api가 여러메서드가 

오픈이 되서 애는 이렇게 쓰고 애는 저렇게 쓰고 이렇게 허용되는게 아니라요 일관된 한두개에

인터페이스를 통해서 함수죠 함수메서드가 공개된메서드가 있어서 객체들을 클라이언트쪽에서는 

개체들만 보고 사용할수 있도록 요렇게 구현이 되어 있습니다. 각 메서드나 멤버변수들을 접근하는데

이제 꼭 필요한 것들만 접근하기 때문에 발생하는 오류를 최소화할수 있다. 저기요기 레포트만들기

예제를 제가 하나 뒀는데 예제가 좀 길어요 그래서 이거는 제가 미리 조금 코딩을 해놨습니다. 

여러분은 시간이 되시면 직접 코딩을 하시는게 좋겠죠 자 애가 어떻게 생긴애냐면 위에서부터

전부다 private프라이빗이죠 여기하나 getReport만 public 퍼블릭이 되어 있습니다.

자 메서드가 호출하는게 makeHeader()위에 찍고 generateBody()제너레이트바디 가운데 바디부분 찍고

makeFooter() 메이크푸터 맨끝에 찍어라 요세개의 메서드를 호출하고 있구요 헤더와 제너레이트바디하고

푸터는 다 프라이빗이에요 외부에 공개되있지 않습니다. 그래서 외부에서 쓸수 있는 메서드는 리포트 하나만

있는 거구요 그럼 요안에서만 보시면 헤더랑 제너레이터바디랑 푸터랑 이순서대로 찍게 되는데 어 이제

헤더부분을 찍는방법이 요렇게 있죠 라인을  하나 찍구요 그다음에 이타이틀을 찍고 그다음에 줄을 하나더 

긋습니다. 라인이 이렇게 돼있구요 StringBuffer라는 애를 하나썼는데 제가 스트링클레스 설명할때 한번더 

애기를 하겠는데 스트링 클레스를 쭉이어서 쓰는 방법이 이젠 계속 더하기 더하기 해서 쓸수도 있어요

근데 그거는 나중에 설명을 드리겠지만 메모리오버헤드가 엄청 큽니다. 그래서 내부적으로 버퍼를 가지고

있는 늘어날수 있는 버퍼를 가지고 있는 클레스에다가 쭉 스트링을 연결을 하고 그리고 나중에 스트링을 

리턴하는 방식으로 많이들 쓰거든요 그때 많이 쓰는애가 스트링버퍼스트링빌더라는 클레스에요 이게외에도

이젠 최근에 자바가 업그레이드 되면서 텍스트방식을 쭉연결할수 있는 방식이 제공되고 있긴 하지만 

이제 최근까지 필드에서 많이 쓰는거는 이스트링버퍼나 스트링빌더방식으로 스트링을 쭉연결하는 

append어팬드라는 메서드를 쓰면 이클레스의멤버변수거든요 쭉연결할수가 있어요 그래서 여기보시면 

바디를 쓸때 이름을 쓰고 주소를 쓰고 핸드폰번호쓰고 이렇게 쭉 연결을 했죠 여러명일때 이거를 쭉 

쓰는거는 참 그 안좋은 코딩방법이구요 사실은 우리가 나중에 뭐 배열이나 이런거를 배우면 그 객체

배열을 for를 돌리면서 반복적으로 돌리면서 그 값들을 꺼내와서 쓸수가 있습니다. 그래가지고 주소록을 

쭉만들고요 그리고 메이크푸터라는거를 해서 맨밑에 라인을 하나 긋는 요메서들이  있는데 사실 이메서드들은

오픈을 해봤자 클라이언트에 오픈을 해봤자 크게 애네들이 소용도 없고 그다음에 뭐 세개를 다 오픈을 해놨는데 

클라이언트가 이순서대로 써야되잖아요 메이크헤더쓰고 제너레이터받아쓰고 메이크푸터쓰고 이순서를 

클라이언트쪽에서는 알필요도 없는거죠 클라이언트쪽 프로그램에는 뭐만 제공을 해주느냐 애만 제공을 

해주고 애를 쓰게 되면 레포트가 제너레이터 될수 있도록 이런것들이 인캡슐레이션의 방식이라고 될수가 

있습니다. 자그러면은 사용하는쪽을 한번 볼게요 class이름을 makeReportTest 메인넣으시고요 

클레스이름이 MakeReport builder = new MakeReport()를 생성한다음에 

builder. 점해서보면 애가 쓸수있는 메서드가 애네들은 다 오브젝트꺼거든요 뒤에 어느클레스의 메서드인지가 보이죠

오브젝트는 나중에우리가 배울건데 자바의 모든클레스의 최상위클레스가 오브젝트클레스이구요 요기에 

builder.getReport(); 가지고 올거구요 String report = builder.getReport();  System.out.println(report); 

이걸 출력을 하면 되겠죠 run해보시면 결과가 잘나옵니다. 다시한번 말씀드리지만 makeReport쪽에 

Make라는 메서드들이 있지만 메서드들은 순서대로 써야되요 순서대로 지켜져야되는순서가 있고

근데 애네들의  각각을 클라이언트코드쪽에서는 알필요가 없습니다. 그렇기 때문에 다 하이드를 hide 시켜서

인포메이션하이딩을 시켜서 프라이빗으로 해놨구요 public한 메서드하나를 제공을 하고 메서드가 순서도

정확하게 만들어놓고 그다음에 결과를 리턴하고 있죠 그결과를 가져다가 이렇게 리포트가 제너레이트되는 

방식을 사용할수가 있습니다. 엔캡슐레이션의하나의 방법인거죠 그죠 그래서 여러가지 방식들이 있지만 

여러분이 기억하셔야 되는건 이런거 같에요 이메서드나 이필드를 외부에 제공을 할것이냐 말것이냐 

객체지향설계를 할때는 그부분이 굉장히 중요한 부분이거든요 그러니까 쭉 계속 중요한 애기들을 하고는 

있는데 객체를 처음에 설계를 하는거 객체를 어떻게 만들고 그다음에 메서드와 속성을 정의를 하느냐 

이런것도 중요했지만 이제는 그메서드와속성을 모두공개하는게 아니라 어떻게 공개를 해서 사용하는

쪽으로 하여금 그죠 좀더 편하게 그다음에 좀더 효율적으로 객체또한 오류없이 잘관리가 될수 있느냐 

라는것도 중요합니다. 그래서 프로그램을 하실때는 어떤정보를 공개할것인가 어떤정보를 공개하지 

않을것인가  라는거에대한 고민도 하셔야 됩니다. 자 여기까지 우리 객체지향에서 인포메이션하이딩

앤캡슐레이션에 대해서 말씀을 드렸구요 다음은 우리가 디스라는 키워드를 봤었는데 디스라는 키워드를 

그 디스라는 키워드에 대해서 정리를 해드리도록 하겠습니다.  