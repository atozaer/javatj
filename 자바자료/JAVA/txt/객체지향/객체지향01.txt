2장 객체지향입문에 대해서 보도록 하겠습니다. 객체지향의 기본적인 내용을 쭉 다 애기를 할거구요 객체지향 프로그래밍이 뭔지 그다음에 객체지향에서 중요하게 생각하는 infomation hideing(정보은닉),

엔캡슐레이션(캡슐화), 이런것들 객체간의 콜라보레이션(협력)에 대해서도 볼거구요 중간중간에 복습해 봅시다를 넣어놨어요 여기까지 배우셨으면 이런것들을 한번 여러분스스로가 코딩을 해보셔라 라는 

의미로 해놨으니까 이런것들도 좀 풀어보시고 그리고 인제 중요한게 간단한 입문이라고 그래서 간단한 내용만 있는게 아니라 메모리 관련한 애기들도 많이 할거구요 그 다음에 그런것들을 알아야 또 우리 

객체지향 객체와 그 인스턴스 그리고 실제적으로 애네들이 어떻게 돌아가는지 내부에 대해서도 좀 이해를 같이 해야 되거든요 그런것들이 같이 있으니까 보시면서 어렵진 않을겁니다. 어렵진 않을 건데 

새로운 개념의 공부가 될수 있으니까 지금까지 애기했던 거는 사실 1장에서 이야기한거는 객체지향 프로그램은 아니고 그냥 기본적으로 어떤 식으로 주로 컴파일 언어들 스크립트언어가 아닌 컴파일언어

들의 기본적인 내용을 말씀을 드렸다고 하면 이제 자바의 객체지향프로그램을 시작하는거니까 이걸 같이 보도록 하겠습니다. 자 첫번째 객체가 뭔지 말씀을 드려야 되고 객체와 객체지향프로그래밍의 흐름은 

뭐냐 말씀을 당연히 드려야 겠죠 객체라는거를 우리가 사전에서 찾아보면요 의사나 행위가 미치는 대상 말은 좀 어렵구요 우리가 프로그램에서 객체는 어떻게 생각해보시면 되냐면 구체적이거나 추상적인 

데이터의 단위 그래서 어떤 액션이 일어나는 어떤 기능을 수행하는 데이터의 단위다. 요것도 좀 사실 어렵죠 좀더 간단하게 애기를 하면 여러가지 명사들을 객체라고 할수가 있어요 학생이니 회원이니 이런것들 

이런게 명사들이 그 객체라고 물체들 뭐 이런것들을 객체라고 할수가 있구요 운송수단 어 동작 어떤 동작을 눈에 보이는 물체가 아니라 어떤 동작을 나타내는 주문이라든가 생산이라든가 관리라든가 이런거 

통계 이런것들도 객체가 될수가 있습니다. 그래서 다 명사죠 그죠 그런것들을 우리가 객체라고 말을 할거구요 그래도 조금 모호하죠 그죠 객체지향 프로그래밍을 어떻게 하느냐 라는거에 대해서 조금씩 같이 

말씀을 드리도록 하겠습니다. 아침에 일어나서 학교를 갑니다. 회사를 가게 되는데 그 과정을 프로그래밍을 한다라고 생각을 해볼게요 프로그래밍을 한다라고 생각을 해보면 가장 쉬운거는 시간의 흐름에 따라서 

프로그램을 하는거에요 절차지향프로그램이라고 하구요 절차지향 프로그램의 대표적인 언어는 C언어가 있습니다. 시간의 흐름에 따라서 프로그램의 흐름을 한다라고 생각하시면 되요 어떻게 보면 쉬운 프로그래밍

방식입니다. 아침에 일어난다. -> 씻는다 -> 밥을 먹는다-> 버스를 탄다->요금을 지불한다. ->학교에 도착했다. 이 일련의 과정을 쭉 프로그래밍을 하는거 뭐 극장가서 ->표를 사서 ->영화를 본다 했을때 

극장에 간다. ->예매표 티켓박스를 간다.->돈을 낸다.->표를 받는다.->시간이 돼서 영화를 감상한다. 이런식으로 쭉 일련의 과정을 시간의 흐름에 따라서 프로그래밍하는거를 절차지향 프로그램이라고 하구요 

대표적인 언어가 C언어입니다. 객체지향 프로그래밍은 다르게 객체를 선언을 해요 객체를 정의한다. 라고 애기를 하는데 객체들이 있습니다. 아침에 일어나서 학교를 가는 과정을 프로그래밍이라고 했을때 

여기서의 객체는 학생이 있을수 있구요 버스를 타고가면 버스가 있을수 있고 학교가 있을 수 있고 밥이 있을수 있습니다. 그러면 이런 객체들 사이에 인터렉션이 일어나거든요 관계가 있는거에요 이런거를 

우리가 협력이 일어난다 콜레보레이션이라고 표현을 하는데 이런 일들이 일어나면 가령 애를 들어서 학생이 버스를 탄다라고 했을때 학생이 버스를 타는 행위는 학생이 버스를 타게 되면 돈을 내야 되죠 

버스는 학생이 타게 되면 승객이 늘어나고 요금을 받으니까 매출이 올라갑니다. 뭐 이런식의 관계들이 형성이 되거든요 이런관계들을 가지고 프로그램을 하는것을 객체지향프로그램이라고 하구요 대표적인 

언어로 C++이 있구요 C# 컴파일언어는 아니지만 Python파이선도 클레스가 있죠 JavaScript같은 경우는 애도 객체개념이 들어가 있고 여러가지언어들 현재 여러분이 알고 있는 필드에서 굉장히 많이 쓰고 

있는 언어들이 객체지향으로 되어 있습니다. 자 그래서 이렇게 코딩을 하는건데 그럼 어떻게 구현을 하나요 좀 모호하죠 뭐 학생이 있고 밥이 있고 훨씬 절차지향이 쉬울거 같은데 실제로 실생활이 많이 

반영된거는 객체지향프로그래밍이기도 해요 왜냐면 우리가 모두 객체잖아요 우리 모두는 객체잖아요 그 객체간의 인터렉션을 프로그래밍 하는거니까 하다 보면 익숙해 지면 훨씬 여러분들에 일상생활이나 

이런것들이 잘 구현돼 있다라는걸 알수 있을 거에요 객체를 정의를 먼저 하셔야 되고 우리가 만일 객체지향 프로그래밍을 한다라고 하면 어떤 객체를 이 프로그램안에 어떤객체들이 필요하냐 객체를 

정의를 하시고 그 객체들이 가져야 하는 속성 우리가 특성 어트리뷰트 프로퍼티 이런 용어들을 쓰는데 속성이라는 용어를 많이 쓸거에요 그 속성들 그것들을 정의를 하시고 애네들이 어떤 기능을 해야 되냐 

이거를 역할이라기라고도 하고 책임이라고도 하는데 객체에 애가 해야되는일 이객체가 해야되는일도 구현하고 말씀드렸듯이 이객체간의 서로 협력이 일어난다라고 했잖아요 이 협력이 되는 부분을 우리가 

어떤 메시지를 전달 파라미터가 넘어간다라든가 객체가 넘어간다라는걸 통해서 객체간에 협력을 구현할수 있다. 코딩을 안하고 말만 쭉 했는데요 이런게 객체지향 프로그램이다 책이나 이런 어떤 웹에서 

인터넷에서 자료를 찾아보면 지금 드린 여러가지 이야기들이 쭉 나열이 돼 있을 거에요 말로만 하는거는 사실 추상적이죠 앞으로 코딩을 해가면서 이렇게 객체를 만들거다 처음 객체지향을 배우시면 

객체를 만드는거부터 어려워하시는데 왜냐하면 이게 약간의 추상화 작업을 하는거거든요 있는 거를 추상화해서 코드화 하는거기 때문에 어려울수도 있지만 이것도 연습을 하셔야 됩니다. 생활속에 

어떤 객체들이 있는지 그러고 그 객체들이 클레스로 어떻게 표현이 될수 있는지 같이 살펴보도록 하겠습니다. 



