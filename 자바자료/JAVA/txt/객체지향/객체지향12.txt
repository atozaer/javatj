자 이제 디스에서 대해서 알아보도록 하겠습니다.

자 그전에 생성자나 메서드에서 디스점하고 우리가 썼었는데요 디스가 어떤앤지 좀 보시고 디스를 어디서 사용하는지를 

보시면 되겠습니다. 프로그램하다 보면 디스라는 키워드를 많이 써요 자바에만 나오는 키워드가 아니라 C++에도 

나오는 키워드구요 다른언어에서도 종종 볼수 있는 키워드일겁니다. 디스라는 키워드를 쓰고 나중에 애의 의미가 

상속관계에 가면 슈퍼라는 키워드가 또 나와요 슈퍼도 애와 비슷한 의미로 사용을 하거든요 디스를 잘 이해를 해

두시면 좋을것 같습니다. 일단 설명을 드리면 인스턴스자신을 가르킨다라고 말씀을 드린거다라고 말씀을 드렸는데

우리가 객체를 NEW하게 되면 객체가 힙메모리에 생성이 된다라고 했죠 그래서 힙메모리에 생성이 될때 초기값을 

갖는애를 우리가 참조변수라고 했고 그 값 자체를 참조값 레퍼런스벨류라고 말씀을 드렸습니다. 음 그때 인제 변수

자체는 그 인스턴스의 외부에 해당이 되죠 외부고 변수는 그리고 그변수가 그 인스턴스를 가르키게 되는데 인스턴스

자체내부에서 가지자신의 주소값을 갖는경우 그게인제디스입니다. 디스라는 키워드는 자기자신의 인스턴스 메모리를 

가르키게 되는 거구요 디스가 하는 일중에 하나가 뭐냐면 이건 나중에 슈퍼라는 애도 마찬가진데 생성자에서 또다른 

생성자로 호출할수가 있습니다. 제가 생성자 설명할때 뭐라고 했냐면 생성자는 원한다고 아무때나 호출될수 있는 

메소드랑 다르다라고 말씀을 드렸고 생성자는 객체가 생성될때 호출이 된다라고 말씀을 드렸어요 그런데 NEW

될때 호출이 되는거죠 그런데 생성자안에서 또다른 생성자안에서 또다른생성자를  호출하는 일들이 있습니다.

나중에 상속을 배우시면 하위클레스에서 상위클레스의 생성자를 호출하는 일들도 있어요 그래서 이렇게 생성자에서

또다른 생성자 클레스에서 생성자가 여러개 있을때 하나의 생성자에서 다른생성자를 호출할때 쓰는 키워드가 

생성자이름으로 호출하는게 아니라요 디스로 호출을 해요 네 이건 좀있다 코드를 볼거구요 또하나는 자신의 주소

참조값자체를 반환할때도 디스를 사용하게 됩니다. 어 인스턴스메모리주소를 가진다라고 했는데 요거를 그림을 

잠깐 보면서 설명을 드릴게요 벌스데이클레스를 잠깐 호출하여 돌리기 위해서 메인함수가 있죠 벌스데이라는 

애를 NEW했습니다. 말씀드렸듯이 힙메모리에 데이 먼스 이어가 잡힌다라고 했죠 네 이렇게 인스턴스가 생성이

됐고 네 그다음에 데이라는 변수는 NEW 뒤에있는 벌스데이 생성된 벌스데이를 가르치는 참조변수잖아요 

그래서 스텍메모리상태에서 보면 이게 전체메모리라고 봤을때 스택메모리 메소드가 호출이 되면 함수나 

메서드가 호출이 되면 그함수나 메서드에 지역변수메모리공간은 스텍에 잡힌다. 라고 말씀을 드렸고 

전에 함수할때 요기보면 여기에 day랑 여기 크게 두개의 변수가 있는데요 요 day변수가 있구요 args아규먼트

변수가 있거든요 day랑 아규먼트변수랑 이렇게 main함수에 그죠 메인함수 이게 플레그먼트라고 하는데 

요기에 요렇게 잡히게 됩니다. 그리고 이게 day가 가르치는 값이 뭐냐 heap힙에 있는 year month day요놈이라는 

거죠 힙메모리에 인스턴스 애를 가르킨다. 라고 했는데 day점 setYear라고 호출을 했어요 그리고서 2000을 줬단 

말이죠  그러면 setYear라는 메소드가 호출이 되면서 setYear에 해당되는 스택 메모리가 잡히는데  this라는 

키워드가 갖게 되는 값은 뭐냐 똑같이 year라는 값이라는거에요 setYear는 누구의 메서드에요 벌스데이의 

메서드죠 벌스데이의 메서드고 요안에서 사용하는 디스라는 값 이값이 가지는 메모리값은 힙에있는 year, month,

day 요거라는 거죠 그래서 우리가 setYear를 쓸때 보면 기존에 이렇게 코딩을 했잖아요 year를 받아서 this.year에다

year를 준다라고 했을때 this 디스점 이어에 있는 이디스라는 값이 뭐다 요 메모리에 값이다 생성된인스턴스 메모리를 

가리키는 역할을 하구요 그래서 반드시 디스를 써주신다고 했죠 여기서 디스를 안쓰면 요이어가 이어에 대입되는 

형국이 된다. 라고 말씀을 드렸습니다. 자그다음에 생성자에서 생성자를 호출하는 디스라고 해서 생성자가 여러개 

있는 경우에 생성자에서 생성자를 호출하는 경우들이 있어요 대부분파라미터가 더적은 생성자에서 매개변수가 더많은

생성자를 호출하는경우들이 있구요 이럴때 이제 생성자를 직접호출하는게 아니라 클래스내부에선 디스를 이용해서

호출합니다. 요기 코드를 보시면 요런식으로 호출한다는거죠 디스하고 가로 요거를 호출하고 this("이름없음",1)요게 

바로 생성자를 호출하는 방식이구요 여기서 우리가 유의할거는 뭐냐면 생성자의 역할은 인스턴스를 초기화하는 

역할이에요 그래서 여기 Person()을 호출할때 디스를 호출하면 이게 스트링하고 인티져죠 요거에 맵핑되는 

요거랑 똑같은 데이타타입에 매개변수를 가진 컨스트럭터를 찾는데 바로 밑에 있네요 String스트링하고 인티져 

애가 맵핑되서 호출이 되는데 애가 호출이 끝나야 인스턴스생성이 끝나는 거에요 요게 호출이 되는 순간에는 

인스턴스가 생성이 아직 된게 아니기 때문에 뭐를 할수 없냐면 이 이전에 다른 코드를 집어넣으면 오류가 생깁니다.

생성자가 다른생성자를 호출하는경우 인스턴스의 생성이 완전하지 않은 상태이므로 this() statement이전에 

다른 statement를 쓸수 없다. 제가 써놨는데 그게 바로 그애기에요 this가 수행되고나서 이뒤에 명령어를 

쓰는건 상관없습니다. this명령 앞에 쓰는건 절대용납못한다. 근데 바로 이위에다가는 코드에 대한 스테이트먼트를

쓸수 없다는거를 하나 유의하시면 될것 같습니다. 애는 한번 같이 만들어볼까요 이클립스여시구요 

패키지를 작성을 하시구요 kr.or.kh12  클래스 Person퍼얼슨 접근지정자를 디폴트로 해서 하겠습니다.

String name;
int age;

public Person(){

}
이거는 디폴트 컨스터럭터죠 데이터가 하나도 안들어온 컨스트럭터구요 그다음에 컨스트럭터를 하나 더 만들었어요

이때는 이름하고  String name, int age;나이를 매개변수로 받는 이런 컨스트럭터를 만들었습니다.  this에 네임은 

네임이고 this.age = age; 요렇게 만들었는데 아무런 값이 안들어왔을때는 초기화를 시켜주고 싶어요 초기화를 그래서

this.name = "이름없음"; age에는 1이라고 초기화를 할려고 해 보니까 그코드가 밑에 매개변수가 있는 클레스에 

있잖아요 그래서 아래에 생성자함수를 부르는 겁니다. 이렇게 많이 불러요  생성자에서 다른 생성자를 이미 똑같은 

그 생성자를 호출해서 멤버변수들을 세팅하는 일들을 합니다.  this("no name",1) 이름은 노우네임 나이는 1이렇게

했다는 거죠 요렇게 하게 되면 애가 호출을 하게 되는거죠 자 테스트코드를 돌려볼텐데 제가 전에 한번 말씀을 

드렸죠 여기다가 직접 할수도 있다구 가끔 할수있나요 하고 물어보시는 분이 있어서 퍼얼슨클레스에다가 메인을 

돌려보도록 하겠습니다. 테스트 따로 안만들었구요 메인에다가 직접 넣어서 돌리는 겁니다. 

Person person = new Person(); 자그럼 이렇게 불르면 애는 디폴트 컨스트럭터가 불린거구요 그거에 대한 값이 

출력이 되겠죠 그래서 여기다가 public void showPerson(){
   System.out.println(name+","+age);
}

Person.showPerson(); 요렇게 하면 매개변수가 있는 생성자가 불렸다라고 하면 셋팅이 됐겠죠  실행을 해보시면

노운네임 1 잘나오신걸 볼수가 있습니다. this키워드가 둘다 쓰였죠 자기자신의 어드레스를 나타내는 디스와

다른생성자를 호출하는 디스 두가지 사용하는 방법을 말씀을 드렸고 아까도 말씀을 드렸지만 

int num = 10; 이런식의 코드를 넣는다든가 name="test"를 this위에 코딩을 넣으면 안된다라는 거에요 

에러메시지를 보시면 요게 가장 먼저 펄스트 스테이트먼트가 되야 된다.라는 뚯이고 위에있는 명령들은 쓸수없다라는거

this밑에다 명령을 쓰는건 상관이 없어요 name = "aaa"; 밑에다 쓰는거는 상관은 없지만 this이전에 쓰실수 없다라는거구요

어 마지막으로 디스의 역할중에 자기자신의 주소를 반환하는 디스가 있는데 여기보시면 음 getPerson이라는 메서드를 

하나 만들고 반환타입은 퍼얼슨이에요 자기자신의 타입이고 이때 디스를 반환하시면 됩니다. 자 이렇게 디스가 반환이 

되서 Person타입으로 반환이 되는데 그럼 이때 이값은 무엇이냐 요거를 저랑 한번 보도록 할게요 

public Person getPerson(){
     return this;
}
이라고 하고 이렇게 하면 

System.out.println(person); 이게 뭐가 출력이 되냐면 전에 말씀드렸듯이 클레스의 풀네임 패키지까지 포함된

클레스의 이름과 뒤에가 jvm이 대입해준 어드레스 이 인스턴스의 어드레스라고 말씀을 드렸어요 

근데 person.getPerson()을 호출할수 있고 이게에 반환 인자가 Person person2 = person.getPerson(); 뭐가 

반환이 됐냐면 디스가 반환이  됐을 것이고 애도 한번 출력을 해보겠습니다. System.out.println(person2);

출력을 해보면요 두개의 값이 같은거를 보실수가 있죠 그래서 여기에서 생성된 person하고 그리고 두번째

함수에서 반환해준 person2하고 같은 값이다. 아까 수업교안에 있는 메모리구조랑 똑같은거죠 벌스데이이

의 인스턴스변수 참조변수의 값과 이내부 메서드내부에서 사용하는 디스의 값이 같은 값이다. 라는걸 

확인하실수가 있습니다. 어 우리가 디스는 자기자신 메모리를 가르치기 위해서 코드안에서 디스점해서

메서드나 메서드보다는 멤버변수를 많이 가르칠때 쓰구요 그다음에 생성자에서 다른생성자를 호출하는 

이때도 디스를 많이 쓰니까 요렇게 이해해 주시면 될것 같습니다. 