싱글톤패턴에 대해서 한번 알아보도록 하겠습니다.

디자인패턴이라는 분야가 있어요 객체지향프로그래밍에서 어떻케 하면 좀더 효율적으로 객체지향프로그램을 구현을 

해서 나중에 수정을 하는데도 용이하고 유지보수가 쉽고 그다음에 좀더 객체지향에 적합하게 코딩을 할것이냐 

라는거를 여러가지 패턴으로 표현을 합니다. 객체지향을 이렇게 코딩을 하면 추후에 유지보수나 뭐 여러가지ㅜ 

확장성에서 굉장히  좋다. 익스터널하고 메인터너스에 좋다. 이런 애기들을 합니다. 그중에 하나가 싱글톤 패턴인데

제가 여기서 이거를 소개해 드리는 이유는 객체지향 디자인패턴은 처음에 공부하시기는 어렵습니다. 나중에 5년

후에 공부하시면 좋을것 같습니다. 아 내가 이렇게 이렇게 했었는데 이 부분은 리팩토링하면 할수도 있겠구나 

이런느낌을 받으실수가 있습니다. 처음하시기엔 조금어려운 부분이 있구요 음 설계에 관련된 내용이라서 근데

그안에 싱글톤 패턴은 간단한 패턴이구요 우리가 배우는 스태틱을 활용해서 만들수 있는 패턴입니다.

한번 같이 보도록 하겠습니다. 음 어떤 경우가 있냐면요 우리가 프로그램을 하다 보면 여러개의 인스턴스가 

생겼을때 문제가 되는 상황이 있습니다. 대부분은 클레스를 만들고 그 클레스에 대해서 여러개인 경우가 

많죠 그죠 음 당연히 많겠죠 학생도 많고 회사원도 많고 회원도 많고 주문도 많고 여러가지 그전에 예로 들었던 

모든 상황들이 많은 인스턴스가 필요한데 그렇지 않은 경우들이 있어요 인스턴스는 여러가지  멤버변수를 가지고

그 멤버변수값이 여러개가 되는데 그러는 경우 문제가 되는 그런 경우가 있습니다. 그래서 가령예를 들면 날짜같은거

그럴수가 있겠죠 타임존에 의해서 제공되는 날짜는 여러개를 가질수가 없어요 우리가 서울 동경시간을 쓰잖아요

그시간이라는 것은 데이먼스이어시분초가 동일해야 됩니다.  그렇기 때문에 그 인스턴스는 여러개일수가 없겠죠

회사로 생각한다라고 하면 우리회사라는 안에 사원은 여러명일수 있지만 회사라는 객체하나는 유일한 만약에

회사라는 객체가 두세개가 생긴다라고 하면 사원도 더블이 될거에요 그죠 그래서 그런 경우에 우리가 싱글톤 패턴

이라고 씁니다. 여기 보시면 프로그램에서 인스턴스가 단 한개만 생성되어야 하는경우에 사용하는 디자인 패턴입니다.

저랑 같이 만드는거는 그렇게 어렵지 않아요 간단하구요 사용하는것도 간단합니다. 그래서 만들어보시고 아 요렇게 

사용할수 있다. 라는거를 한번 보도록 하겠습니다. 패키지를 만드시고 kr.or.kh18

회사라고 생각을 해볼게요 클레스 Company 아까 말씀드렸지만 회사라고 생각을 해보시고 회사라는 객체는 유일해야 

된다. 라는거죠 회사라는 객체가 여러개 있을수는 없습니다. 그죠 그 하나의 회사에서 지점이 여러개 일수는 있지만 

동일한 회사가 두개인 경우는 없죠 그래서 하나의 인스턴스만 존재하게 만듩텐데 음 이대로 그냥 두면 외부에서 

컴퍼니를 여러개 생성할수 있습니다. 왜냐면 우리가 말씀드렸듯이 생성자를 하나도 제공하지 않으면 컴파일러가 

디폴트 생성자를 넣어준다고 말씀을 드렸고 그렇기 때문에 외부에서는 디폴트생성자는 퍼블릭으로 제공이 되잖아요

외부에서는 컴퍼니는 계속 new 할수 있는거죠 그래서 일단 싱글톤 패턴에서는 외부에서 컴퍼니를 마음대로 new

할수 없도록 생성자를 하나 제공을 합니다 private Company(){ } 프라이빗으로 제공을 해요 그렇게 생성자를 내가 

만들어버리면 컴파일러는 생성자를 제공해주지 않죠 프라이빗으로 하나 생성자를 만들고 생성자안에서 코드를 

넣으셔도 됩니다. 코드를 넣으셔도 되는데 우린 지금은 특별히 코드를 넣을일이 없구요 그리고 나서 유일한 인스턴스는 

이 내부에서 만듭니다.  역시 프라이빗으로 만들구요 단 하나만 있을거니까 private static Company instance = new Company();

유일한 객체가 된거죠 그러면 우리가 이제 이 유일한 객체를 외부에서 쓸수있도록 해줘야 겠죠 어째든 이회사에 임플루이 

배열로 만들수도 있고 여러가지 요소들이 들어갈수도 있는데 그 요소들에 접근을 할려면 이 유일한 인스턴스에 접근을 

해야 되는거죠 그래서 접근을 하기위한 퍼블릭메서드를 만들어주고 컴포니라고 반환자를 준다음에 public Company 

getInstance라는 이름을 많이 쓰구요 리턴인스턴스 return instance; 하시면 됩니다. 인스턴스 하시는데 그런일은 없지만 

혹시라도 인스턴스가 널이면 인스턴스에 new연산자에 Company()회사를 만들어서 넣어줘라 방어적인 코드를 하나 

넣었습니다. 자 이상태에서 생각을 해봤을때 외부에서 getInstance를 써야 되는데 일반 메서드면 어떻게 해야 되요 

인스턴스를 생성하고 그다음에 이겟인스턴스메서드를 호출할수가 있죠 그래서 이메서드는 static으로 선언을 해야 됩니다.

그래야지 외부에서 클래스이름으로 이메서드를 호출해서 사용할수가 있죠 요게 싱글톤 패턴입니다. 여기까지가 

외부에서 한번 써볼까요 클레스를 생성합니다. 컴퍼니테스트 CompanyTest main작성하시고 피니시

Company company1 = Company.getInstance(); 점한다음에 겟 인스턴스 getInstance를 일반메서드로 호출 선언을 

해놨다면 애를 호출하기 위해서 인스턴스를 하나 만들어야 되요 인스턴스를 만들지 않고 바로 가져다 쓸거잖아요

겟인스터스는 스태틱메서드로 제공이 돼야 되요 요렇게 해주고 컴퍼니클래스를 하나더 만들어볼까요 

Company company2 = Company.getInstance(); 다 만들어놓고 어떻게 불러서 쓰나요 이걸어떻게 갖다 쓰나요하는 

경우가 종종있는데 이건 new 하는 인스턴스를 생성해서 가져다 쓰는 훈련이 많이 돼셨기 때문에 그런데 static으로

선언된 변수는 클레스이름으로 가져다 써야 됩니다. 두개의 어드래스를 찍어보겠습니다. System.out.println(company1);

System.out.println(company2); jvm이 할당해준 힙메모리 어드레스가 찍히겠죠 실행해 보면 같죠 백번을 불러도 같은 

놈이 나옵니다. 컴퍼니는 외부에서 생성할수도 없고 그죠 내부의 프라이빗으로 하나 생성되있고 이메서드만제공이 

되기 때문에 애만을 사용할수가 있다. 애가 싱글톤 패턴입니다. 칼렌다라는 달력을 날짜나 이런거 필요할때 써요

애가 일반적으로 제공중에 자바 유틸에서 제공되는 거기 때문에 임포트하고 new 칼렌다하면 없어요 

 Calendar calendar = Calendar.getInstance(); 요렇게 적죠 유일한 객체를 제공할때 싱글톤패턴을 사용을 합니다.

스태틱을 배웠기 때문에 스태틱을 활용해서 이렇게 사용할수 있다. 라는거를 말씀을 드렸구요 애가 앞으로 

이 이후에 상속이나 추상클레스 인터페이스 뭐 이런거 할때 가끔 볼거에요 이런 네모박스 음 클래스 다이어그램인데

어 약식으로 만들었습니다. 음 uml로테이션을 그대로 갖다 쓴건 아니구요 뭐 이런식으로 네모박스가 있구요 그 다음에

맨위에 클레스이름 그다음에 요기에는 변수 그다음에 여기는 생성자와 메서드 앞에 마이너스로 되있는건 프라이빗이라는

뜻이구 +로 돼있는것은 퍼블릭이라는 뜻입니다. 그래서 싱글톤이라는 클래스이름에 인스턴스라는 프라이빗 멤버변수

하나있고 그다음에 싱글톤이라는 생성자가 프라이빗이다. 겟인스턴스는 퍼블릭으로 제공이 된다.  겟인스턴스를 

가져다 쓰면 되겠죠 네 여기까지 해서 우리가 스태틱을 배우고 스태틱을 활용하는 것까지 말씀을 드렸습니다.

  